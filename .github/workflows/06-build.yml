name: 06 - Build

on:
  workflow_call:
    inputs:
      project_name:
        description: "Project name to build"
        required: true
        type: string
      project_url:
        description: "Project URL"
        required: true
        type: string
      build_timeout:
        description: "Build timeout in minutes"
        required: false
        type: number
        default: 60


jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.build_timeout }}
    env:
      ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup build environment
        run: |
          echo "Setting up build environment for ${{ inputs.project_name }}"
          echo "Project URL: ${{ inputs.project_url }}"
          
      - name: Get and decrypt build parameters
        run: |
          # 加载共享工具函数
          source .github/workflows/shared/github-utils.sh
          
          # 获取队列数据
          QUEUE_MANAGER_ISSUE="1"
          QUEUE_MANAGER_CONTENT=$(get_queue_manager_content "$QUEUE_MANAGER_ISSUE")
          QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
          
          if [ $? -ne 0 ]; then
            echo "❌ Failed to get queue data"
            exit 1
          fi
          
          # 获取当前构建ID
          CURRENT_BUILD_ID="${{ github.run_id }}"
          
          # 从队列中找到当前构建项
          CURRENT_QUEUE_ITEM=$(echo "$QUEUE_DATA" | \
            jq -r --arg build_id "$CURRENT_BUILD_ID" \
            '.queue[] | select(.build_id == $build_id) // empty')
          
          if [ -z "$CURRENT_QUEUE_ITEM" ]; then
            echo "❌ Current build not found in queue"
            exit 1
          fi
          
          # 获取当前队列项的加密参数
          ENCRYPTED_EMAIL=$(echo "$CURRENT_QUEUE_ITEM" | jq -r '.encrypted_email // empty')
          ENCRYPTED_SUPER_PASSWORD=$(echo "$CURRENT_QUEUE_ITEM" | jq -r '.encrypted_super_password // empty')
          ENCRYPTED_RENDEZVOUS_SERVER=$(echo "$CURRENT_QUEUE_ITEM" | jq -r '.encrypted_rendezvous_server // empty')
          ENCRYPTED_RS_PUB_KEY=$(echo "$CURRENT_QUEUE_ITEM" | jq -r '.encrypted_rs_pub_key // empty')
          ENCRYPTED_API_SERVER=$(echo "$CURRENT_QUEUE_ITEM" | jq -r '.encrypted_api_server // empty')
          
          if [ -z "$ENCRYPTED_EMAIL" ] || [ -z "$ENCRYPTED_SUPER_PASSWORD" ]; then
            echo "❌ No encrypted parameters found for current build"
            exit 1
          fi
          
          # 解密参数
          EMAIL=$(decrypt_params "$ENCRYPTED_EMAIL")
          SUPER_PASSWORD=$(decrypt_params "$ENCRYPTED_SUPER_PASSWORD")
          RENDEZVOUS_SERVER=$(decrypt_params "$ENCRYPTED_RENDEZVOUS_SERVER")
          RS_PUB_KEY=$(decrypt_params "$ENCRYPTED_RS_PUB_KEY")
          API_SERVER=$(decrypt_params "$ENCRYPTED_API_SERVER")
          
          # 获取公开参数
          TAG=$(echo "$CURRENT_QUEUE_ITEM" | jq -r '.tag // empty')
          CUSTOMER=$(echo "$CURRENT_QUEUE_ITEM" | jq -r '.customer // empty')
          
          echo "🔐 Decrypted build parameters:"
          echo "TAG: $TAG"
          echo "EMAIL: $EMAIL"
          echo "CUSTOMER: $CUSTOMER"
          echo "SUPER_PASSWORD: [HIDDEN]"
          echo "RENDEZVOUS_SERVER: $RENDEZVOUS_SERVER"
          echo "API_SERVER: $API_SERVER"
          
          # 设置环境变量供后续步骤使用
          echo "BUILD_TAG=$TAG" >> $GITHUB_ENV
          echo "BUILD_EMAIL=$EMAIL" >> $GITHUB_ENV
          echo "BUILD_CUSTOMER=$CUSTOMER" >> $GITHUB_ENV
          echo "BUILD_SUPER_PASSWORD=$SUPER_PASSWORD" >> $GITHUB_ENV
          echo "BUILD_RENDEZVOUS_SERVER=$RENDEZVOUS_SERVER" >> $GITHUB_ENV
          echo "BUILD_RS_PUB_KEY=$RS_PUB_KEY" >> $GITHUB_ENV
          echo "BUILD_API_SERVER=$API_SERVER" >> $GITHUB_ENV
          
      - name: Execute build script
        run: |
          echo "Starting build process..."
          # 这里可以插入实际构建命令，如 make、npm run build 等
          echo "Build completed successfully"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ inputs.project_name }}
          path: |
            build/
            dist/
            target/
            *.exe
            *.dmg
            *.deb
            *.rpm
            *.zip
            *.tar.gz
          retention-days: 30
          
      - name: Notify build completion
        run: |
          echo "Build workflow completed for ${{ inputs.project_name }}"
          echo "Artifacts have been uploaded"
          
      - name: Update queue status
        uses: ./.github/workflows/shared/github-utils
        with:
          action: update_queue_status
          project_name: ${{ inputs.project_name }}
          status: completed
 