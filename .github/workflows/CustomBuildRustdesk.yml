name: Custom Rustdesk Build Workflow

on:
  # Issue 触发
  issues:
    types: [opened]
  
  # 手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: '构建标签'
        required: true
        default: 'custom'
      customer:
        description: '客户名称'
        required: true
        default: 'test'
      customer_link:
        description: '客户链接'
        required: false
        default: ''
      slogan:
        description: '标语'
        required: false
        default: 'Custom Rustdesk'
      email:
        description: '邮箱地址'
        required: true
        default: 'admin@example.com'
      super_password:
        description: '超级密码'
        required: true
        default: 'password123'
      rendezvous_server:
        description: 'Rendezvous服务地址'
        required: true
        default: '192.168.1.100'
      rs_pub_key:
        description: 'RS公钥'
        required: false
        default: ''
      api_server:
        description: 'API服务地址'
        required: true
        default: 'http://192.168.1.100:21114'
      enable_debug:
        description: '启用调试模式（仅手动触发时有效）'
        required: false
        default: true
        type: boolean

permissions:
  issues: write
  contents: read
  actions: read

env:
  GITHUB_TOKEN: ${{ secrets.ISSUE_TOKEN }}
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
  # 调试配置 - 默认不开启调试，只在手动触发时可通过input控制
  DEBUG_ENABLED: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.enable_debug == 'true' || 'false' }}

jobs:
  # 00-触发处理
  trigger:
    runs-on: ubuntu-latest
    outputs:
      trigger_type: ${{ steps.trigger.outputs.trigger_type }}
      build_id: ${{ steps.trigger.outputs.build_id }}
      trigger_data: ${{ steps.trigger.outputs.data }}
      should_proceed: ${{ steps.trigger.outputs.should_proceed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup trigger parameters
        id: trigger
        run: |
          source .github/workflows/scripts/trigger.sh
          # 使用环境变量传递事件数据，避免命令行参数过长
          export EVENT_NAME="${{ github.event_name }}"
          export EVENT_DATA='${{ toJSON(github.event) }}'
          export BUILD_ID="${{ github.run_id }}"
          # 传递完整事件数据，脚本内部根据事件类型处理
          process_trigger "$EVENT_NAME" "$EVENT_DATA" "$BUILD_ID"
          

          
  # 01-审查验证
  review:
    needs: trigger
    if: needs.trigger.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      validation_passed: ${{ steps.review.outputs.validation_passed }}
      reject_reason: ${{ steps.review.outputs.reject_reason }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        

        
      - name: Review and validate
        id: review
        env:
          TRIGGER_DATA: ${{ needs.trigger.outputs.trigger_data }}
        run: |
          source .github/workflows/scripts/review.sh
          process_review "$TRIGGER_DATA" "${{ github.actor }}" "${{ github.repository_owner }}"
          

          
  # 02-加入队列
  join-queue:
    needs: [trigger, review]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.validation_passed == 'true'
    env:
      TRIGGER_DATA: ${{ needs.trigger.outputs.trigger_data }}
    runs-on: ubuntu-latest
    outputs:
      join_success: ${{ steps.join-queue.outputs.join_success }}
      queue_position: ${{ steps.join-queue.outputs.queue_position }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        

        
      - name: Join build queue with optimistic lock
        id: join-queue
        env:
          TRIGGER_DATA: ${{ needs.trigger.outputs.trigger_data }}
        run: |
          source .github/workflows/scripts/hybrid-lock.sh
          source .github/workflows/scripts/issue-manager.sh
          
          # 使用乐观锁加入队列
          echo "Starting optimistic lock queue join process..."
          join_result=$(main_hybrid_lock "join_queue" \
                          "${{ needs.trigger.outputs.build_id }}" \
                          "${{ needs.trigger.outputs.trigger_type }}" \
                          "$TRIGGER_DATA" \
                          "5")
          
          # 检查加入结果
          if [ $? -eq 0 ]; then
            echo "✅ Successfully joined queue using optimistic lock"
            echo "join_success=true" >> $GITHUB_OUTPUT
            echo "queue_position=1" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to join queue"
            echo "join_success=false" >> $GITHUB_OUTPUT
            echo "queue_position=-1" >> $GITHUB_OUTPUT
          fi
          

          
  # 03-等待队列
  wait-queue:
    needs: [trigger, review, join-queue]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.validation_passed == 'true' && needs.join-queue.outputs.join_success == 'true'
    runs-on: ubuntu-latest
    outputs:
      lock_acquired: ${{ steps.wait-queue.outputs.lock_acquired }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        

        
      - name: Wait for queue turn
        id: wait-queue
        run: |
          source .github/workflows/scripts/hybrid-lock.sh

          # 使用悲观锁等待并获取构建锁
          lock_result=$(main_hybrid_lock "acquire_lock" "${{ needs.trigger.outputs.build_id }}" "1")

          # 检查获取锁的结果
          if [ $? -eq 0 ]; then
            echo "✅ Successfully acquired build lock"
            echo "lock_acquired=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to acquire build lock"
            echo "lock_acquired=false" >> $GITHUB_OUTPUT
          fi
          

          
  # 04-执行构建
  build:
    needs: [trigger, review, join-queue, wait-queue]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.validation_passed == 'true' && needs.join-queue.outputs.join_success == 'true' && needs.wait-queue.outputs.lock_acquired == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Simulate build process
        id: build
        run: |
          echo "🚀 开始模拟编译过程..."
          echo "⏳ 编译暂停5分钟..."
          sleep 300
          echo "✅ 编译完成"
          echo "📦 生成下载链接: https://example.com/download/rustdesk-custom.zip"
          
          
  # 05-完成处理
  finish:
    needs: [trigger, review, join-queue, wait-queue, build]
    if: always() && needs.trigger.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Complete cleanup phase
        run: |
          echo "🧹 开始完成清理阶段..."
          echo "📋 构建结果汇总:"
          echo "🔓 释放构建锁..."
          echo "✅ 完成清理阶段" 
          
 
