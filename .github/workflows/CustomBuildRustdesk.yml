name: Custom Rustdesk Build Workflow

on:
  # Issue 触发
  issues:
    types: [opened, edited]
  
  # 手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: '构建标签'
        required: true
        default: 'custom'
      customer:
        description: '客户名称'
        required: true
        default: 'test'
      customer_link:
        description: '客户链接'
        required: false
        default: ''
      slogan:
        description: '标语'
        required: false
        default: 'Custom Rustdesk'
      email:
        description: '邮箱地址'
        required: true
        default: 'admin@example.com'
      super_password:
        description: '超级密码'
        required: true
        default: 'password123'
      rendezvous_server:
        description: 'Rendezvous服务地址'
        required: true
        default: '192.168.1.100'
      rs_pub_key:
        description: 'RS公钥'
        required: false
        default: ''
      api_server:
        description: 'API服务地址'
        required: true
        default: 'http://192.168.1.100:21114'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

jobs:
  # 00-触发处理
  trigger:
    runs-on: ubuntu-latest
    outputs:
      trigger_type: ${{ steps.trigger.outputs.trigger_type }}
      build_id: ${{ steps.trigger.outputs.build_id }}
      trigger_data: ${{ steps.trigger.outputs.trigger_data }}
      should_proceed: ${{ steps.trigger.outputs.should_proceed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup trigger parameters
        id: trigger
        run: |
          source .github/workflows/scripts/trigger.sh
          # 使用环境变量传递事件数据，避免命令行参数过长
          export EVENT_NAME="${{ github.event_name }}"
          export EVENT_DATA='${{ toJSON(github.event) }}'
          export BUILD_ID="${{ github.run_id }}"
          # 传递完整事件数据，脚本内部根据事件类型处理
          process_trigger "$EVENT_NAME" "$EVENT_DATA" "$BUILD_ID"
          
  # 01-审查验证
  review:
    needs: trigger
    if: needs.trigger.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      validation_passed: ${{ steps.review.outputs.validation_passed }}
      reject_reason: ${{ steps.review.outputs.reject_reason }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Review and validate
        id: review
        run: |
          source .github/workflows/scripts/review.sh
          process_review "${{ needs.trigger.outputs.trigger_data }}" "${{ github.actor }}" "${{ github.repository_owner }}"
          
  # 02-加入队列
  join-queue:
    needs: [trigger, review]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.validation_passed == 'true'
    runs-on: ubuntu-latest
    outputs:
      join_success: ${{ steps.join-queue.outputs.join_success }}
      queue_position: ${{ steps.join-queue.outputs.queue_position }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Join build queue with optimistic lock
        id: join-queue
        run: |
          source .github/workflows/scripts/hybrid-lock.sh
          source .github/workflows/scripts/issue-manager.sh
          
          # 使用乐观锁加入队列
          echo "Starting optimistic lock queue join process..."
          main_hybrid_lock "join_queue" \
                          "${{ needs.trigger.outputs.build_id }}" \
                          "${{ needs.trigger.outputs.trigger_type }}" \
                          "${{ needs.trigger.outputs.trigger_data }}" \
                          "5"
          
          # 检查加入结果
          if [ "$(echo "$join_success" | tail -1)" = "true" ]; then
            echo "✅ Successfully joined queue using optimistic lock"
            echo "join_success=true" >> $GITHUB_OUTPUT
            echo "queue_position=$(echo "$queue_position" | tail -1)" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to join queue"
            echo "join_success=false" >> $GITHUB_OUTPUT
            echo "queue_position=-1" >> $GITHUB_OUTPUT
          fi
          
  # 03-等待队列
  wait-queue:
    needs: [trigger, review, join-queue]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.validation_passed == 'true' && needs.join-queue.outputs.join_success == 'true'
    runs-on: ubuntu-latest
    outputs:
      lock_acquired: ${{ steps.wait-queue.outputs.lock_acquired }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Wait for queue turn
        id: wait-queue
        run: |
          source .github/workflows/scripts/hybrid-lock.sh

          # 使用悲观锁等待并获取构建锁
          main_hybrid_lock "acquire_lock" "${{ needs.trigger.outputs.build_id }}" "1"

          if [ "$(echo "$lock_acquired" | tail -1)" = "true" ]; then
            echo "lock_acquired=true" >> $GITHUB_OUTPUT
          else
            echo "lock_acquired=false" >> $GITHUB_OUTPUT
          fi
          
  # 04-执行构建
  build:
    needs: [trigger, review, join-queue, wait-queue]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.validation_passed == 'true' && needs.join-queue.outputs.join_success == 'true' && needs.wait-queue.outputs.lock_acquired == 'true'
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.build.outputs.build_success }}
      download_url: ${{ steps.build.outputs.download_url }}
      error_message: ${{ steps.build.outputs.error_message }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Execute build
        id: build
        run: |
          source .github/workflows/scripts/build.sh
          process_build "${{ needs.trigger.outputs.trigger_data }}"
          
  # 05-完成处理
  finish:
    needs: [trigger, review, join-queue, wait-queue, build]
    if: always() && needs.trigger.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Finish build process and release lock
        run: |
          source .github/workflows/scripts/hybrid-lock.sh
          source .github/workflows/scripts/finish.sh
          
          # 获取构建结果
          BUILD_SUCCESS="${{ needs.build.outputs.build_success }}"
          DOWNLOAD_URL="${{ needs.build.outputs.download_url }}"
          ERROR_MESSAGE="${{ needs.build.outputs.error_message }}"
          
          # 完成处理
          process_finish "Custom Rustdesk Build" \
                        "$DOWNLOAD_URL" \
                        "$BUILD_SUCCESS" \
                        "$DOWNLOAD_URL" \
                        "$ERROR_MESSAGE" \
                        "${{ needs.trigger.outputs.build_id }}" \
                        "${{ needs.trigger.outputs.trigger_type }}" \
                        "${{ needs.trigger.outputs.build_id }}"
          
          # 释放悲观锁（无论构建成功还是失败都要释放）
          echo "Releasing pessimistic lock..."
          main_hybrid_lock "release_lock" "${{ needs.trigger.outputs.build_id }}" "1"
          
          if [ $? -eq 0 ]; then
            echo "✅ Pessimistic lock released successfully"
          else
            echo "❌ Failed to release pessimistic lock"
          fi 
