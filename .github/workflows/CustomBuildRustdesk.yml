name: Custom Build Rustdesk

on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      tag:
        description: "标签名称"
        required: false
        default: "vCustom"
        type: string
      email:
        description: "邮件地址"
        required: false
        default: "rustdesk@example.com"
        type: string
      customer:
        description: "客户名称"
        required: false
        default: "自由工作室"
        type: string
      customer_link:
        description: "客户链接"
        required: false
        default: "https://rustdesk.com"
        type: string
      super_password:
        description: "超级密码"
        required: false
        default: "123456"
        type: string
      slogan:
        description: "标语"
        required: false
        default: "安全可靠的远程桌面解决方案"
        type: string
      rendezvous_server:
        description: "服务器地址"
        required: false
        default: "1.2.3.4:21117"
        type: string
      rs_pub_key:
        description: "公钥"
        required: false
        default: "xxxxx"
        type: string
      api_server:
        description: "API服务器地址"
        required: false
        default: "https://api.example.com"
        type: string

# 添加权限配置
permissions:
  issues: write
  contents: read

jobs:
  trigger: # 触发阶段
    runs-on: ubuntu-latest
    outputs:
      trigger_output: ${{ toJson(steps.setup.outputs.data) }}
    steps:
      - name: Setup framework
        id: setup
        run: |
          echo "Preparing environment..."
          
          # 判断触发方式并提取参数
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # 手动触发：使用workflow_dispatch输入参数
            echo "Manual trigger detected"
            TAG="${{ github.event.inputs.tag }}"
            EMAIL="${{ github.event.inputs.email }}"
            CUSTOMER="${{ github.event.inputs.customer }}"
            CUSTOMER_LINK="${{ github.event.inputs.customer_link }}"
            SUPER_PASSWORD="${{ github.event.inputs.super_password }}"
            SLOGAN="${{ github.event.inputs.slogan }}"
            RENDEZVOUS_SERVER="${{ github.event.inputs.rendezvous_server }}"
            RS_PUB_KEY="${{ github.event.inputs.rs_pub_key }}"
            API_SERVER="${{ github.event.inputs.api_server }}"
          else
            # Issue触发：从issue内容中提取参数
            echo "Issue trigger detected"
            ISSUE_BODY="${{ github.event.issue.body }}"
            
            # 使用grep和sed提取参数值
            TAG=$(echo "$ISSUE_BODY" | grep -oP 'tag:\s*\K[^\r\n]+' | head -1 || echo "")
            EMAIL=$(echo "$ISSUE_BODY" | grep -oP 'email:\s*\K[^\r\n]+' | head -1 || echo "")
            CUSTOMER=$(echo "$ISSUE_BODY" | grep -oP 'customer:\s*\K[^\r\n]+' | head -1 || echo "")
            CUSTOMER_LINK=$(echo "$ISSUE_BODY" | grep -oP 'customer_link:\s*\K[^\r\n]+' | head -1 || echo "")
            SUPER_PASSWORD=$(echo "$ISSUE_BODY" | grep -oP 'super_password:\s*\K[^\r\n]+' | head -1 || echo "")
            SLOGAN=$(echo "$ISSUE_BODY" | grep -oP 'slogan:\s*\K[^\r\n]+' | head -1 || echo "")
            RENDEZVOUS_SERVER=$(echo "$ISSUE_BODY" | grep -oP 'rendezvous_server:\s*\K[^\r\n]+' | head -1 || echo "")
            RS_PUB_KEY=$(echo "$ISSUE_BODY" | grep -oP 'rs_pub_key:\s*\K[^\r\n]+' | head -1 || echo "")
            API_SERVER=$(echo "$ISSUE_BODY" | grep -oP 'api_server:\s*\K[^\r\n]+' | head -1 || echo "")
          fi
          
          # 检查关键参数是否为空，如果为空则使用secrets兜底
          if [ -z "$RENDEZVOUS_SERVER" ] || [ -z "$RS_PUB_KEY" ]; then
            echo "Using secrets fallback for missing critical parameters"
            TAG="${TAG:-${{ secrets.DEFAULT_TAG }}}"
            EMAIL="${EMAIL:-${{ secrets.DEFAULT_EMAIL }}}"
            CUSTOMER="${CUSTOMER:-${{ secrets.DEFAULT_CUSTOMER }}}"
            CUSTOMER_LINK="${CUSTOMER_LINK:-${{ secrets.DEFAULT_CUSTOMER_LINK }}}"
            SUPER_PASSWORD="${SUPER_PASSWORD:-${{ secrets.DEFAULT_SUPER_PASSWORD }}}"
            SLOGAN="${SLOGAN:-${{ secrets.DEFAULT_SLOGAN }}}"
            RENDEZVOUS_SERVER="${RENDEZVOUS_SERVER:-${{ secrets.DEFAULT_RENDEZVOUS_SERVER }}}"
            RS_PUB_KEY="${RS_PUB_KEY:-${{ secrets.DEFAULT_RS_PUB_KEY }}}"
            API_SERVER="${API_SERVER:-${{ secrets.DEFAULT_API_SERVER }}}"
          fi
          
          # 生成初始JSON数据
          DATA=$(jq -c -n \
            --arg tag "$TAG" \
            --arg email "$EMAIL" \
            --arg customer "$CUSTOMER" \
            --arg customer_link "$CUSTOMER_LINK" \
            --arg super_password "$SUPER_PASSWORD" \
            --arg slogan "$SLOGAN" \
            --arg rendezvous_server "$RENDEZVOUS_SERVER" \
            --arg rs_pub_key "$RS_PUB_KEY" \
            --arg api_server "$API_SERVER" \
            '{tag: $tag, email: $email, customer: $customer, customer_link: $customer_link, super_password: $super_password, slogan: $slogan, rendezvous_server: $rendezvous_server, rs_pub_key: $rs_pub_key, api_server: $api_server}')
          
          # 存储输出
          echo "data=$DATA" >> $GITHUB_OUTPUT
      
      - name: Overwrite issue content
        if: github.event_name == 'issues'
        run: |
          # 创建清理后的issue内容
          CLEANED_BODY="## 构建请求已处理

          **构建参数：**
          - 标签: ${{ fromJson(steps.setup.outputs.data).tag }}
          - 客户: ${{ fromJson(steps.setup.outputs.data).customer }}
          - 标语: ${{ fromJson(steps.setup.outputs.data).slogan }}

          **状态：** 构建已启动
          **时间：** $(date '+%Y-%m-%d %H:%M:%S')

          ---
          *敏感信息已自动清理*"
          
          # 使用jq正确转义JSON
          JSON_PAYLOAD=$(jq -n --arg body "$CLEANED_BODY" '{"body": $body}')
          
          # 使用GitHub API更新issue
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }} \
            -d "$JSON_PAYLOAD"
      
      - name: Verify dependencies
        run: echo "Checking system dependencies"
      
      - name: Generate config
        run: |
          # 在同一个job中访问数据
          echo "Trigger type: ${{ github.event_name }}"
          echo "Tag: ${{ fromJson(steps.setup.outputs.data).tag }}"
          echo "Customer: ${{ fromJson(steps.setup.outputs.data).customer }}"
          echo "Rendezvous Server: ${{ fromJson(steps.setup.outputs.data).rendezvous_server }}"

  review: # 审核阶段
    needs: trigger
    runs-on: ubuntu-latest
    outputs:
      review_output: ${{ toJson(steps.output.outputs.data) }}
      build_approved: ${{ steps.output.outputs.build_approved }}
    steps:
      - name: Extract data
        id: extract
        run: |
          # 仅提取数据，不进行任何处理
          INPUT='${{ fromJson(needs.trigger.outputs.trigger_output) }}'
          
          # 提取服务器地址
          RENDEZVOUS_SERVER=$(echo "$INPUT" | jq -r '.rendezvous_server')
          API_SERVER=$(echo "$INPUT" | jq -r '.api_server')
          EMAIL=$(echo "$INPUT" | jq -r '.email')
          
          # 设置环境变量供后续步骤使用
          echo "RENDEZVOUS_SERVER=$RENDEZVOUS_SERVER" >> $GITHUB_ENV
          echo "API_SERVER=$API_SERVER" >> $GITHUB_ENV
          echo "EMAIL=$EMAIL" >> $GITHUB_ENV
          echo "CURRENT_DATA=$INPUT" >> $GITHUB_ENV
          
          # 验证JSON格式
          echo "Validating JSON format..."
          echo "$INPUT" | jq . > /dev/null
          echo "JSON validation passed"
      
      - name: Auto reject invalid server parameters
        run: |
          is_valid_ip() {
            [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]+)?$ ]]
          }
          is_valid_domain() {
            [[ "$1" =~ ^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(:[0-9]+)?$ ]]
          }
          is_valid_url() {
            local url="$1"
            url="${url#http://}"
            url="${url#https://}"
            is_valid_ip "$url" || is_valid_domain "$url"
          }
          is_email() {
            [[ "$1" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]
          }
          AUTO_REJECT_REASON=""
          if ! is_valid_ip "$RENDEZVOUS_SERVER" && ! is_valid_domain "$RENDEZVOUS_SERVER"; then
            AUTO_REJECT_REASON="${AUTO_REJECT_REASON}rendezvous_server 非法: $RENDEZVOUS_SERVER
          "
          fi
          if ! is_valid_url "$API_SERVER"; then
            AUTO_REJECT_REASON="${AUTO_REJECT_REASON}api_server 非法: $API_SERVER
          "
          fi
          if [ -n "$EMAIL" ] && ! is_email "$EMAIL"; then
            AUTO_REJECT_REASON="${AUTO_REJECT_REASON}email 格式非法: $EMAIL
          "
          fi
          # 去掉最后多余的空行
          AUTO_REJECT_REASON=$(echo "$AUTO_REJECT_REASON" | sed '/^$/d')
          if [ -n "$AUTO_REJECT_REASON" ]; then
            echo "自动拒绝：$AUTO_REJECT_REASON"
            REJECT_COMMENT="## ❌ 构建被自动拒绝
            **原因：**
            $AUTO_REJECT_REASON
            **时间：** $(date '+%Y-%m-%d %H:%M:%S')
            请检查参数后重新提交issue。"
            echo -e "$REJECT_COMMENT" | jq -Rs '{body: .}' | \
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
                -d @-
            echo "BUILD_REJECTED=true" >> $GITHUB_ENV
            exit 0
          fi

      - name: Determine review requirement
        if: env.BUILD_REJECTED != 'true'
        run: |
          # 默认需要审核
          NEED_REVIEW=true

          # 仓库所有者免审核
          if [ "${{ github.actor }}" = "${{ github.repository_owner }}" ]; then
            echo "Repo owner detected, skipping review."
            NEED_REVIEW=false
          fi

          # 检查是否为私有IP地址
          check_private_ip() {
            local ip=$1
            # 移除端口号（如果有）
            ip=$(echo "$ip" | cut -d: -f1)
            
            # 检查10.0.0.0/8
            if [[ "$ip" =~ ^10\. ]]; then
              return 0
            fi
            
            # 检查172.16.0.0/12
            if [[ "$ip" =~ ^172\.(1[6-9]|2[0-9]|3[0-1])\. ]]; then
              return 0
            fi
            
            # 检查192.168.0.0/16
            if [[ "$ip" =~ ^192\.168\. ]]; then
              return 0
            fi
            
            return 1
          }
          
          # 检查两个服务器地址
          RENDEZVOUS_PRIVATE=false
          API_PRIVATE=false
          
          if check_private_ip "$RENDEZVOUS_SERVER"; then
            RENDEZVOUS_PRIVATE=true
            echo "Rendezvous server is private IP: $RENDEZVOUS_SERVER"
          else
            echo "Rendezvous server is public IP: $RENDEZVOUS_SERVER"
          fi
          
          if check_private_ip "$API_SERVER"; then
            API_PRIVATE=true
            echo "API server is private IP: $API_SERVER"
          else
            echo "API server is public IP: $API_SERVER"
          fi
          
          # 判断是否需要审核
          if [ "$NEED_REVIEW" = "false" ]; then
            echo "Skipping review due to repo owner or private IP check."
          else
            if [ "$RENDEZVOUS_PRIVATE" = "true" ] && [ "$API_PRIVATE" = "true" ]; then
              NEED_REVIEW=false
              echo "Both servers are private IPs - no review needed"
            else
              NEED_REVIEW=true
              echo "At least one server is public IP - review required"
            fi
          fi
          
          # 设置审核标记到环境变量，供后续步骤使用
          echo "NEED_REVIEW=$NEED_REVIEW" >> $GITHUB_ENV
      
      - name: Handle review process
        if: env.NEED_REVIEW == 'true' && env.BUILD_REJECTED != 'true'
        run: |
          echo "Review required. Starting review process..."
          
          # 在issue中添加审核状态
          REVIEW_COMMENT="## 🔍 审核状态

          **需要审核原因：** 检测到公网服务器地址
          - Rendezvous Server: $RENDEZVOUS_SERVER
          - API Server: $API_SERVER

          **审核要求：** 请管理员回复 '同意构建' 或 '拒绝构建'

          **状态：** 等待审核中 ⏳
          **时间：** $(date '+%Y-%m-%d %H:%M:%S')"
          
          # 使用jq正确转义JSON
          JSON_PAYLOAD=$(jq -n --arg body "$REVIEW_COMMENT" '{"body": $body}')

          # 添加审核评论
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -d "$(jq -n --arg body "$REVIEW_COMMENT" '{"body": $body}')"
          
          # 循环检查审核回复
          START_TIME=$(date +%s)
          TIMEOUT=7200  # 2小时超时
          APPROVED=false
          REJECTED=false # 新增变量，用于标记拒绝
          
          while [ $(($(date +%s) - START_TIME)) -lt $TIMEOUT ]; do
            echo "Checking for admin approval... ($(($(date +%s) - START_TIME))s elapsed)"
            
            # 获取issue的最新评论
            COMMENTS=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments)
            
            # 检查是否有管理员回复
            # 获取仓库所有者和管理员列表
            REPO_OWNER="${{ github.repository_owner }}"
            
            # 检查是否有管理员回复（包括仓库所有者）
            if echo "$COMMENTS" | jq -e --arg owner "$REPO_OWNER" '.[] | select(.user.login == $owner or .user.login == "admin" or .user.login == "管理员用户名") | select(.body | contains("同意构建"))' > /dev/null; then
              APPROVED=true
              break
            fi
            
            if echo "$COMMENTS" | jq -e --arg owner "$REPO_OWNER" '.[] | select(.user.login == $owner or .user.login == "admin" or .user.login == "管理员用户名") | select(.body | contains("拒绝构建"))' > /dev/null; then
              REJECTED=true
              break
            fi
            
            # 调试：输出最新的评论信息
            echo "Latest comments:"
            echo "$COMMENTS" | jq -r '.[-3:] | .[] | "User: \(.user.login), Body: \(.body[0:100])..."'
            
            # 等待30秒后再次检查
            sleep 30
          done
          
          if [ "$APPROVED" = true ]; then
            echo "Admin approval received"
            # 添加审核通过评论
            APPROVAL_COMMENT="## ✅ 审核通过
            **状态：** 审核已通过
            **审核人：** 管理员
            **时间：** $(date '+%Y-%m-%d %H:%M:%S')
            构建将继续进行..."
            
          # 使用jq正确转义JSON
          JSON_PAYLOAD=$(jq -n --arg body "$APPROVAL_COMMENT" '{"body": $body}')

            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d "$(jq -n --arg body "$APPROVAL_COMMENT" '{"body": $body}')"
          elif [ "$REJECTED" = true ]; then
            echo "Build rejected by admin"
            
            # 添加拒绝评论
            REJECT_COMMENT="## ❌ 构建被拒绝
            **状态：** 构建已被管理员拒绝
            **时间：** $(date '+%Y-%m-%d %H:%M:%S')
            构建流程已终止。如需重新构建，请重新提交issue。"
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d "$(jq -n --arg body "$REJECT_COMMENT" "{\"body\": \$body}")"
            
            echo "Build rejected by admin - setting build_approved to false"
            # 设置构建被拒绝标志
            echo "BUILD_REJECTED=true" >> $GITHUB_ENV
          else
            echo "Review timeout after 2 hours"
            # 添加超时评论
            TIMEOUT_COMMENT="## ⏰ 审核超时
            **状态：** 审核超时（2小时）
            **时间：** $(date '+%Y-%m-%d %H:%M:%S')
            构建将自动终止。如需重新构建，请重新提交issue。"
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d "$(jq -n --arg body "$TIMEOUT_COMMENT" "{\"body\": \$body}")"
            
            echo "Review timeout - setting build_approved to false"
            # 设置审核超时标志
            echo "BUILD_TIMEOUT=true" >> $GITHUB_ENV
          fi

      - name: Output data
        if: env.BUILD_REJECTED != 'true'
        id: output
        run: |
          # 重新获取原始数据并确保JSON格式正确
          INPUT='${{ fromJson(needs.trigger.outputs.trigger_output) }}'
          
          # 确保输出的是有效的JSON格式
          echo "data=$INPUT" >> $GITHUB_OUTPUT
          
          # 根据标志设置构建批准状态
          if [ "${{ env.BUILD_REJECTED }}" = "true" ]; then
            echo "build_approved=false" >> $GITHUB_OUTPUT
            echo "Build was rejected by admin"
          elif [ "${{ env.BUILD_TIMEOUT }}" = "true" ]; then
            echo "build_approved=false" >> $GITHUB_OUTPUT
            echo "Build timed out during review"
          else
            echo "build_approved=true" >> $GITHUB_OUTPUT
            echo "Build was approved or no review needed"
          fi
          
          # 显示输出信息
          echo "Review output: $INPUT"
          
          # 验证输出的JSON格式
          echo "Validating output JSON format..."
          echo "$INPUT" | jq . > /dev/null
          echo "Output JSON validation passed"

  queue: # 排队阶段
    needs: review
    runs-on: ubuntu-latest
    if: needs.review.outputs.build_approved == 'true'
    outputs:
      queue_output: ${{ toJson(steps.output.outputs.data) }}
    steps:
      - name: Extract data
        id: extract
        run: |
          # 提取数据
          INPUT='${{ fromJson(needs.review.outputs.review_output) }}'
          
          # 验证输入JSON格式
          echo "Validating input JSON format..."
          echo "$INPUT" | jq . > /dev/null
          echo "Input JSON validation passed"
          
          # 设置环境变量供后续步骤使用
          echo "CURRENT_DATA=$INPUT" >> $GITHUB_ENV
          
          # 获取触发方式
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TRIGGER_TYPE=workflow_dispatch" >> $GITHUB_ENV
            echo "QUEUE_LIMIT=5" >> $GITHUB_ENV
          else
            echo "TRIGGER_TYPE=issue" >> $GITHUB_ENV
            echo "QUEUE_LIMIT=3" >> $GITHUB_ENV
          fi

      - name: Check queue status
        id: check_queue
        run: |
          # 获取当前队列状态
          echo "Checking current queue status..."
          
          # 队列管理issue编号
          QUEUE_MANAGER_ISSUE="1"
          
          # 获取队列管理issue的内容
          QUEUE_MANAGER_CONTENT=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
          
          # 检查issue是否存在
          if echo "$QUEUE_MANAGER_CONTENT" | jq -e '.message' | grep -q "Not Found"; then
            echo "Error: Queue manager issue #$QUEUE_MANAGER_ISSUE not found"
            exit 1
          fi
          
          # 解析队列数据（从issue body中提取JSON）
          QUEUE_DATA=$(echo "$QUEUE_MANAGER_CONTENT" | jq -r '.body' | grep -oP '```json\K.*?(?=```)' | head -1)
          
          if [ -z "$QUEUE_DATA" ]; then
            # 如果队列数据不存在，初始化空队列
            echo "Initializing empty queue..."
            QUEUE_DATA='{"issue_queue":[],"workflow_queue":[]}'
          fi
          
          # 验证JSON格式
          echo "$QUEUE_DATA" | jq . > /dev/null
          
          # 获取当前各类型队列数量
          ISSUE_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.issue_queue | length')
          WORKFLOW_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.workflow_queue | length')
          TOTAL_QUEUE_COUNT=$((ISSUE_QUEUE_COUNT + WORKFLOW_QUEUE_COUNT))
          
          echo "Current issue queue count: $ISSUE_QUEUE_COUNT/3"
          echo "Current workflow queue count: $WORKFLOW_QUEUE_COUNT/5"
          echo "Total queue count: $TOTAL_QUEUE_COUNT/5"
          
          # 检查是否可以加入队列
          QUEUE_FULL=false
          REJECT_REASON=""
          
          # 检查总队列限制
          if [ "$TOTAL_QUEUE_COUNT" -ge 5 ]; then
            QUEUE_FULL=true
            REJECT_REASON="总队列已满 (当前: $TOTAL_QUEUE_COUNT/5)"
          elif [ "$TRIGGER_TYPE" = "issue" ] && [ "$ISSUE_QUEUE_COUNT" -ge 3 ]; then
            QUEUE_FULL=true
            REJECT_REASON="Issue队列已满 (当前: $ISSUE_QUEUE_COUNT/3)"
          elif [ "$TRIGGER_TYPE" = "workflow_dispatch" ] && [ "$WORKFLOW_QUEUE_COUNT" -ge 5 ]; then
            QUEUE_FULL=true
            REJECT_REASON="Workflow队列已满 (当前: $WORKFLOW_QUEUE_COUNT/5)"
          else
            QUEUE_FULL=false
          fi
          
          if [ "$QUEUE_FULL" = true ]; then
            echo "Queue is full: $REJECT_REASON"
            echo "QUEUE_FULL=true" >> $GITHUB_ENV
            echo "REJECT_REASON=$REJECT_REASON" >> $GITHUB_ENV
            
            # 计算预计等待时间（假设每个构建需要30分钟）
            ESTIMATED_WAIT=$((TOTAL_QUEUE_COUNT * 30))
            echo "ESTIMATED_WAIT=$ESTIMATED_WAIT" >> $GITHUB_ENV
          else
            echo "Queue has space"
            echo "QUEUE_FULL=false" >> $GITHUB_ENV
          fi
          
          # 保存队列数据供后续使用
          echo "QUEUE_DATA=$QUEUE_DATA" >> $GITHUB_ENV

      - name: Handle queue full
        if: env.QUEUE_FULL == 'true'
        run: |
          # 队列满员，拒绝请求
          REJECT_COMMENT="## ❌ 队列已满

          **拒绝原因：** $REJECT_REASON
          **当前队列状态：**
          - Issue队列：$ISSUE_QUEUE_COUNT/3
          - Workflow队列：$WORKFLOW_QUEUE_COUNT/5
          - 总队列：$TOTAL_QUEUE_COUNT/5
          **预计等待时间：** 约${ESTIMATED_WAIT}分钟

          **建议：**
          - 请稍后重试
          - 或使用其他触发方式

          **时间：** $(date '+%Y-%m-%d %H:%M:%S')"
          
          # 添加拒绝评论
          echo -e "$REJECT_COMMENT" | jq -Rs '{body: .}' | \
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d @-
          
          # 退出工作流
          exit 1

      - name: Join queue
        if: env.QUEUE_FULL == 'false'
        run: |
          # 加入队列
          echo "Joining queue..."
          
          # 获取当前issue信息
          CURRENT_ISSUE_NUMBER="${{ github.event.issue.number }}"
          CURRENT_ISSUE_TITLE="${{ github.event.issue.title }}"
          CURRENT_USER="${{ github.actor }}"
          JOIN_TIME=$(date -Iseconds)
          
          # 创建队列项
          QUEUE_ITEM=$(jq -n \
            --arg issue_number "$CURRENT_ISSUE_NUMBER" \
            --arg issue_title "$CURRENT_ISSUE_TITLE" \
            --arg user "$CURRENT_USER" \
            --arg join_time "$JOIN_TIME" \
            '{
              issue_number: $issue_number,
              issue_title: $issue_title,
              user: $user,
              join_time: $join_time
            }')
          
          # 更新队列数据
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            UPDATED_QUEUE_DATA=$(echo "$QUEUE_DATA" | jq --argjson item "$QUEUE_ITEM" '.issue_queue += [$item]')
          else
            UPDATED_QUEUE_DATA=$(echo "$QUEUE_DATA" | jq --argjson item "$QUEUE_ITEM" '.workflow_queue += [$item]')
          fi
          
          # 更新队列管理issue
          QUEUE_MANAGER_ISSUE="1"
          UPDATED_BODY="## 构建队列管理

          **最后更新时间：** $(date '+%Y-%m-%d %H:%M:%S')

          ### Issue队列 (最多3个)
          - 当前数量：$(echo "$UPDATED_QUEUE_DATA" | jq '.issue_queue | length')/3

          ### Workflow队列 (最多5个)
          - 当前数量：$(echo "$UPDATED_QUEUE_DATA" | jq '.workflow_queue | length')/5

          ### 总队列 (最多5个)
          - 当前数量：$(echo "$UPDATED_QUEUE_DATA" | jq '.issue_queue | length + .workflow_queue | length')/5

          ---

          ### 队列数据
          \`\`\`json
          $UPDATED_QUEUE_DATA
          \`\`\`"
          
          # 更新队列管理issue
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE" \
            -d "$(jq -n --arg body "$UPDATED_BODY" '{"body": $body}')"
          
          # 计算队列位置
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            QUEUE_POSITION=$((ISSUE_QUEUE_COUNT + 1))
            QUEUE_LIMIT=3
          else
            QUEUE_POSITION=$((WORKFLOW_QUEUE_COUNT + 1))
            QUEUE_LIMIT=5
          fi
          echo "QUEUE_POSITION=$QUEUE_POSITION" >> $GITHUB_ENV
          
          # 添加队列加入评论
          QUEUE_JOIN_COMMENT="## 已加入队列

          **队列位置：** $QUEUE_POSITION/$QUEUE_LIMIT ($TRIGGER_TYPE队列)
          **预计等待时间：** 约$((TOTAL_QUEUE_COUNT * 30))分钟
          **状态：** 等待中 ⏳

          **当前队列状态：**
          - Issue队列：$ISSUE_QUEUE_COUNT/3
          - Workflow队列：$WORKFLOW_QUEUE_COUNT/5
          - 总队列：$TOTAL_QUEUE_COUNT/5

          **队列信息：**
          - 加入时间：$(date '+%Y-%m-%d %H:%M:%S')
          - 触发方式：$TRIGGER_TYPE
          - 队列管理：Issue #$QUEUE_MANAGER_ISSUE"
          
          echo -e "$QUEUE_JOIN_COMMENT" | jq -Rs '{body: .}' | \
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d @-

      - name: Wait in queue
        if: env.QUEUE_FULL == 'false'
        run: |
          # 等待轮到自己的位置
          echo "Waiting in queue..."
          
          START_TIME=$(date +%s)
          TIMEOUT=7200  # 2小时超时
          
          while [ $(($(date +%s) - START_TIME)) -lt $TIMEOUT ]; do
            echo "Checking queue position... ($(($(date +%s) - START_TIME))s elapsed)"
            
            # 重新获取队列管理issue的内容
            QUEUE_MANAGER_ISSUE="1"
            QUEUE_MANAGER_CONTENT=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
            
            # 解析队列数据
            CURRENT_QUEUE_DATA=$(echo "$QUEUE_MANAGER_CONTENT" | jq -r '.body' | grep -oP '```json\K.*?(?=```)' | head -1)
            
            # 根据触发类型获取对应队列位置
            if [ "$TRIGGER_TYPE" = "issue" ]; then
              CURRENT_POSITION=$(echo "$CURRENT_QUEUE_DATA" | \
                jq --arg issue_number "${{ github.event.issue.number }}" \
                '.issue_queue | map(.issue_number) | index($issue_number) | . + 1')
              QUEUE_LIMIT=3
            else
              CURRENT_POSITION=$(echo "$CURRENT_QUEUE_DATA" | \
                jq --arg issue_number "${{ github.event.issue.number }}" \
                '.workflow_queue | map(.issue_number) | index($issue_number) | . + 1')
              QUEUE_LIMIT=5
            fi
            
            # 获取当前队列状态
            CURRENT_ISSUE_COUNT=$(echo "$CURRENT_QUEUE_DATA" | jq '.issue_queue | length')
            CURRENT_WORKFLOW_COUNT=$(echo "$CURRENT_QUEUE_DATA" | jq '.workflow_queue | length')
            CURRENT_TOTAL_COUNT=$((CURRENT_ISSUE_COUNT + CURRENT_WORKFLOW_COUNT))
            
            if [ "$CURRENT_POSITION" = "1" ]; then
              echo "It's our turn to build!"
              break
            else
              echo "Current position: $CURRENT_POSITION, still waiting..."
              
              # 更新队列状态评论
              UPDATE_COMMENT="## 队列状态更新

              **当前位置：** $CURRENT_POSITION/$QUEUE_LIMIT ($TRIGGER_TYPE队列)
              **预计等待时间：** 约$((CURRENT_TOTAL_COUNT * 30))分钟
              **状态：** 等待中 ⏳

              **当前队列状态：**
              - Issue队列：$CURRENT_ISSUE_COUNT/3
              - Workflow队列：$CURRENT_WORKFLOW_COUNT/5
              - 总队列：$CURRENT_TOTAL_COUNT/5

              **更新时间：** $(date '+%Y-%m-%d %H:%M:%S')"
              
              # 添加新评论
              echo -e "$UPDATE_COMMENT" | jq -Rs '{body: .}' | \
                curl -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
                  -d @-
              
              # 等待5分钟后再次检查
              sleep 300
            fi
          done
          
          if [ $(($(date +%s) - START_TIME)) -ge $TIMEOUT ]; then
            echo "Queue timeout after 2 hours"
            # 添加超时评论
            TIMEOUT_COMMENT="## ⏰ 队列等待超时

            **状态：** 队列等待超时（2小时）
            **时间：** $(date '+%Y-%m-%d %H:%M:%S')
            构建将自动终止。如需重新构建，请重新提交issue。"
            
            echo -e "$TIMEOUT_COMMENT" | jq -Rs '{body: .}' | \
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
                -d @-
            
            exit 1
          fi

      - name: Leave queue
        if: env.QUEUE_FULL == 'false'
        run: |
          # 离开队列，开始构建
          echo "Leaving queue to start build..."
          
          # 从队列管理issue中移除当前issue
          QUEUE_MANAGER_ISSUE="1"
          QUEUE_MANAGER_CONTENT=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
          
          # 解析当前队列数据
          CURRENT_QUEUE_DATA=$(echo "$QUEUE_MANAGER_CONTENT" | jq -r '.body' | grep -oP '```json\K.*?(?=```)' | head -1)
          
          # 从对应队列中移除当前issue
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            UPDATED_QUEUE_DATA=$(echo "$CURRENT_QUEUE_DATA" | \
              jq --arg issue_number "${{ github.event.issue.number }}" \
              '.issue_queue = (.issue_queue | map(select(.issue_number != $issue_number)))')
          else
            UPDATED_QUEUE_DATA=$(echo "$CURRENT_QUEUE_DATA" | \
              jq --arg issue_number "${{ github.event.issue.number }}" \
              '.workflow_queue = (.workflow_queue | map(select(.issue_number != $issue_number)))')
          fi
          
          # 更新队列管理issue
          UPDATED_BODY="## 构建队列管理

          **最后更新时间：** $(date '+%Y-%m-%d %H:%M:%S')

          ### Issue队列 (最多3个)
          - 当前数量：$(echo "$UPDATED_QUEUE_DATA" | jq '.issue_queue | length')/3

          ### Workflow队列 (最多5个)
          - 当前数量：$(echo "$UPDATED_QUEUE_DATA" | jq '.workflow_queue | length')/5

          ### 总队列 (最多5个)
          - 当前数量：$(echo "$UPDATED_QUEUE_DATA" | jq '.issue_queue | length + .workflow_queue | length')/5

          ---

          ### 队列数据
          \`\`\`json
          $UPDATED_QUEUE_DATA
          \`\`\`"
          
          # 更新队列管理issue
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE" \
            -d "$(jq -n --arg body "$UPDATED_BODY" '{"body": $body}')"
          
          # 添加开始构建评论
          BUILD_START_COMMENT="## 🚀 开始构建

          **状态：** 构建已开始
          **时间：** $(date '+%Y-%m-%d %H:%M:%S')
          构建过程正在进行中..."

          echo -e "$BUILD_START_COMMENT" | jq -Rs '{body: .}' | \
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d @-

      - name: Process data
        if: env.QUEUE_FULL == 'false'
        id: process
        run: |
          # 处理数据（添加队列信息）
          CURRENT_DATA='${{ env.CURRENT_DATA }}'
          
          # 验证JSON格式
          echo "Validating input JSON..."
          echo "$CURRENT_DATA" | jq . > /dev/null
          echo "Input JSON validation passed"
          
          # 使用jq处理JSON，添加队列信息
          PROCESSED=$(echo "$CURRENT_DATA" | jq -c \
            --arg queue_time "$(date -Iseconds)" \
            --arg queue_position "$QUEUE_POSITION" \
            --arg trigger_type "$TRIGGER_TYPE" \
            '. + {queued: true, queue_time: $queue_time, queue_position: $queue_position, trigger_type: $trigger_type}')
          
          # 验证处理后的JSON格式
          echo "Validating processed JSON..."
          echo "$PROCESSED" | jq . > /dev/null
          echo "Processed JSON validation passed"
          
          echo "CURRENT_DATA=$PROCESSED" >> $GITHUB_ENV

      - name: Output data
        if: env.QUEUE_FULL == 'false'
        id: output
        run: |
          # 输出处理后的数据
          OUTPUT_DATA='${{ env.CURRENT_DATA }}'
          
          # 验证输出JSON格式
          echo "Validating output JSON format..."
          echo "$OUTPUT_DATA" | jq . > /dev/null
          echo "Output JSON validation passed"
          
          echo "data=$OUTPUT_DATA" >> $GITHUB_OUTPUT
          
          # 显示输出信息
          echo "Queue output: $OUTPUT_DATA"

  build: # 构建阶段
    needs: queue
    runs-on: ubuntu-latest
    if: needs.queue.outputs.queue_output != null
    outputs:
      build_output: ${{ toJson(steps.output.outputs.data) }}
    steps:
      - name: Extract data
        id: extract
        run: |
          # 仅提取数据，不进行任何处理
          INPUT='${{ fromJson(needs.queue.outputs.queue_output) }}'
          
          # 验证输入JSON格式
          echo "Validating input JSON format..."
          echo "$INPUT" | jq . > /dev/null
          echo "Input JSON validation passed"
          
          # 设置环境变量供后续步骤使用
          echo "CURRENT_DATA=$INPUT" >> $GITHUB_ENV

      - name: Process data
        id: process
        run: |
          # 处理数据（添加构建状态）
          # 从环境变量中安全地提取JSON数据
          CURRENT_DATA='${{ env.CURRENT_DATA }}'
          
          # 验证JSON格式
          echo "Validating input JSON..."
          echo "$CURRENT_DATA" | jq . > /dev/null
          echo "Input JSON validation passed"
          
          # 使用jq处理JSON，添加构建状态
          PROCESSED=$(echo "$CURRENT_DATA" | jq -c --arg build_time "$(date -Iseconds)" '. + {built: true, build_time: $build_time}')
          
          # 验证处理后的JSON格式
          echo "Validating processed JSON..."
          echo "$PROCESSED" | jq . > /dev/null
          echo "Processed JSON validation passed"
          
          echo "CURRENT_DATA=$PROCESSED" >> $GITHUB_ENV

      - name: Output data
        id: output
        run: |
          # 直接使用Process步骤处理后的数据
          OUTPUT_DATA='${{ env.CURRENT_DATA }}'
          
          # 验证输出JSON格式
          echo "Validating output JSON format..."
          echo "$OUTPUT_DATA" | jq . > /dev/null
          echo "Output JSON validation passed"
          
          echo "data=$OUTPUT_DATA" >> $GITHUB_OUTPUT
          
          # 显示输出信息
          echo "Build output: $OUTPUT_DATA"

  finish: # 收尾阶段
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.build_output != null
    steps:
      - name: Parse input
        run: |
          # 正确获取输入数据
          INPUT='${{ fromJson(needs.build.outputs.build_output) }}'
          echo "FINAL_INPUT=$INPUT" >> $GITHUB_ENV

      - name: Final processing
        run: |
          # 使用jq解析单行JSON
          echo "Final data: $FINAL_INPUT"
          echo "Ready status: $(jq -r '.ready' <<< "$FINAL_INPUT")"
          echo "Version: $(jq -r '.version' <<< "$FINAL_INPUT")"

      - name: Generate report
        run: |
          echo "Build completed successfully"
