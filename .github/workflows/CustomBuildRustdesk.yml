name: Custom Build Rustdesk

on:
  issues:
    types: [opened]
  workflow_dispatch:

jobs:
  trigger:  # 触发阶段
    runs-on: ubuntu-latest
    outputs:
      trigger_output: ${{ toJson(steps.setup.outputs.data) }}
    steps:
      - name: Setup framework
        id: setup
        run: |
          echo "Preparing environment..."
          # 生成初始JSON数据
          DATA=$(jq -c -n \
            --arg ready "true" \
            --arg version "1.0" \
            --arg var1 "value1" \
            --arg var2 "value2" \
            '{ready: $ready, version: $version, additional_vars: {var1: $var1, var2: $var2}}')
          
          # 存储输出
          echo "data=$DATA" >> $GITHUB_OUTPUT
      
      - name: Verify dependencies
        run: echo "Checking system dependencies"
      
      - name: Generate config
        run: |
          # 在同一个job中访问数据
          echo "Version: ${{ fromJson(steps.setup.outputs.data).version }}"

  review:  # 审核阶段
    needs: trigger
    runs-on: ubuntu-latest
    outputs:
      review_output: ${{ toJson(steps.process.outputs.data) }}
    steps:
      - name: Process data
        id: process
        run: |
          # 正确获取输入数据
          INPUT='${{ fromJson(needs.trigger.outputs.trigger_output) }}'
          
          # 使用jq处理并生成紧凑的单行JSON
          PROCESSED=$(jq -c '. + {processed_by: "review"}' <<< "$INPUT")
          echo "data=$PROCESSED" >> $GITHUB_OUTPUT
      
      - name: Output data
        run: |
          echo "Review output: ${{ steps.process.outputs.data }}"

  queue:  # 排队阶段
    needs: review
    runs-on: ubuntu-latest
    outputs:
      queue_output: ${{ toJson(steps.process.outputs.data) }}
    steps:
      - name: Process data
        id: process
        run: |
          # 正确获取输入数据
          INPUT='${{ fromJson(needs.review.outputs.review_output) }}'
          
          # 使用jq处理并生成紧凑的单行JSON
          PROCESSED=$(jq -c '.version = "2.0"' <<< "$INPUT")
          echo "data=$PROCESSED" >> $GITHUB_OUTPUT
      
      - name: Output data
        run: |
          echo "Queue output: ${{ steps.process.outputs.data }}"

  build:  # 构建阶段
    needs: queue
    runs-on: ubuntu-latest
    outputs:
      build_output: ${{ toJson(steps.process.outputs.data) }}
    steps:
      - name: Process data
        id: process
        run: |
          # 正确获取输入数据
          INPUT='${{ fromJson(needs.queue.outputs.queue_output) }}'
          
          # 使用jq处理并生成紧凑的单行JSON
          PROCESSED=$(jq -c '.final = true' <<< "$INPUT")
          echo "data=$PROCESSED" >> $GITHUB_OUTPUT
      
      - name: Output data
        run: |
          echo "Build output: ${{ steps.process.outputs.data }}"

  finish:  # 收尾阶段
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Parse input
        run: |
          # 正确获取输入数据
          INPUT='${{ fromJson(needs.build.outputs.build_output) }}'
          echo "FINAL_INPUT=$INPUT" >> $GITHUB_ENV
      
      - name: Final processing
        run: |
          # 使用jq解析单行JSON
          echo "Final data: $FINAL_INPUT"
          echo "Ready status: $(jq -r '.ready' <<< "$FINAL_INPUT")"
          echo "Version: $(jq -r '.version' <<< "$FINAL_INPUT")"
      
      - name: Generate report
        run: |
          echo "Build completed successfully" 