name: Custom Rustdesk Build Workflow

on:
  # Issue 触发
  issues:
    types: [opened]
  
  # 手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: '构建标签'
        required: true
        default: 'custom'
      customer:
        description: '客户名称'
        required: true
        default: 'test'
      customer_link:
        description: '客户链接'
        required: false
        default: ''
      slogan:
        description: '标语'
        required: false
        default: 'Custom Rustdesk'
      email:
        description: '邮箱地址'
        required: true
        default: 'admin@example.com'
      super_password:
        description: '超级密码'
        required: true
        default: 'password123'
      rendezvous_server:
        description: 'Rendezvous服务地址'
        required: true
        default: '192.168.1.100'
      rs_pub_key:
        description: 'RS公钥'
        required: false
        default: ''
      api_server:
        description: 'API服务地址'
        required: true
        default: 'http://192.168.1.100:21114'
      enable_debug:
        description: '启用调试模式（仅手动触发时有效）'
        required: false
        default: true
        type: boolean

permissions:
  issues: write
  contents: read
  actions: read

env:
  GITHUB_TOKEN: ${{ secrets.ISSUE_TOKEN }}
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
  # 队列管理配置
  QUEUE_ISSUE_NUMBER: '1'
  # 调试配置 - 默认不开启调试，只在手动触发时可通过input控制
  # DEBUG_ENABLED: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.enable_debug == 'true' || 'false' }}
  DEBUG_ENABLED: true
  # 默认值配置
  DEFAULT_TAG: ${{ secrets.DEFAULT_TAG }}
  DEFAULT_EMAIL: ${{ secrets.DEFAULT_EMAIL }}
  DEFAULT_CUSTOMER: ${{ secrets.DEFAULT_CUSTOMER }}
  DEFAULT_CUSTOMER_LINK: ${{ secrets.DEFAULT_CUSTOMER_LINK }}
  DEFAULT_SUPER_PASSWORD: ${{ secrets.DEFAULT_SUPER_PASSWORD }}
  DEFAULT_SLOGAN: ${{ secrets.DEFAULT_SLOGAN }}
  DEFAULT_RENDEZVOUS_SERVER: ${{ secrets.DEFAULT_RENDEZVOUS_SERVER }}
  DEFAULT_RS_PUB_KEY: ${{ secrets.DEFAULT_RS_PUB_KEY }}
  DEFAULT_API_SERVER: ${{ secrets.DEFAULT_API_SERVER }}

jobs:
  # 00-触发处理
  trigger:
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.trigger.outputs.build_id }}
      trigger_data: ${{ steps.trigger.outputs.data }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup trigger parameters
        id: trigger
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          source .github/workflows/scripts/trigger.sh
          
          # 使用环境变量传递事件数据
          export EVENT_DATA='${{ toJSON(github.event) }}'
          
          # 根据触发类型提取参数
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            params=$(trigger_manager "extract-workflow-dispatch" "$EVENT_DATA")
            eval "$params"
          else
            echo "extract-issue"
            params=$(trigger_manager "extract-issue" "$EVENT_DATA")
            eval "$params"
          fi
          
          # 应用默认值
          final_params=$(trigger_manager "apply-defaults" "$EVENT_DATA")
          eval "$final_params"
          
          # 处理tag时间戳
          final_tag=$(trigger_manager "process-tag" "$EVENT_DATA")
          
          # 生成最终JSON数据
          final_data=$(trigger_manager "generate-data" "$EVENT_DATA" "$final_tag")
          
          # 如果是issue触发，需要清理issue内容
          trigger_type="${{ github.event_name }}"
          if [ "$trigger_type" = "issues" ]; then
            cleaned_body=$(trigger_manager "clean-issue" "$final_tag" "$TAG" "$CUSTOMER" "$SLOGAN")
            issue_number="${{ github.event.issue.number }}"
            trigger_manager "update-issue" "$issue_number" "$cleaned_body"
          fi
          
          # 输出到GitHub Actions
          trigger_manager "output-to-github" "$final_data"
          

          
  # 01-审查验证
  review:
    needs: trigger
    runs-on: ubuntu-latest
    outputs:
      validation_passed: ${{ steps.review.outputs.validation_passed }}
      reject_reason: ${{ steps.review.outputs.reject_reason }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Review and validate
        id: review
        env:
          TRIGGER_DATA: ${{ needs.trigger.outputs.trigger_data }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          source .github/workflows/scripts/review.sh
          
          # 设置审核数据
          echo "TRIGGER_OUTPUT=$TRIGGER_DATA" >> $GITHUB_ENV
          echo "BUILD_REJECTED=false" >> $GITHUB_ENV
          echo "BUILD_TIMEOUT=false" >> $GITHUB_ENV
          
          # 并行检查所有参数
          validation_result=$(review_manager "validate" "$EVENT_DATA" "$TRIGGER_DATA")
          validation_exit_code=$?
          
          echo "Validation result: '$validation_result'"
          echo "Validation exit code: $validation_exit_code"
          
          # 如果有问题，处理拒绝逻辑
          if [ $validation_exit_code -eq 0 ] && [ "$validation_result" != "[]" ]; then
            export BUILD_REJECTED="true"
            review_manager "handle-rejection" "$EVENT_DATA" "$TRIGGER_DATA" "$validation_result"
            review_manager "output-data" "$EVENT_DATA" "$TRIGGER_DATA" "true" "false"
            exit 0
          else
            export BUILD_REJECTED="false"
          fi
          
          # 确定是否需要审核    
          need_review=$(review_manager "need-review" "$EVENT_DATA" "$TRIGGER_DATA")
          echo "Need review: $need_review"
          
          # 如果需要审核，处理审核流程
          if [ "$need_review" = "true" ]; then
            review_result=$(review_manager "handle-review" "$EVENT_DATA" "$TRIGGER_DATA")
            review_exit_code=$?
            
            if [ $review_exit_code -eq 1 ]; then
              # 被拒绝
              exit 1
            elif [ $review_exit_code -eq 2 ]; then
              # 超时
              echo "BUILD_TIMEOUT=true" >> $GITHUB_ENV
              review_manager "output-rejected" "$TRIGGER_DATA"
              exit 1
            fi
          fi
          
          # 输出数据
          review_manager "output-data" "$EVENT_DATA" "$TRIGGER_DATA" "$BUILD_REJECTED" "$BUILD_TIMEOUT"
          

          
  # 02-加入队列
  join-queue:
    needs: [trigger, review]
    env:
      TRIGGER_DATA: ${{ needs.trigger.outputs.trigger_data }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY: ${{ github.repository }}
    runs-on: ubuntu-latest
    outputs:
      join_success: ${{ steps.join-queue.outputs.join_success }}
      queue_position: ${{ steps.join-queue.outputs.queue_position }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        

        
      - name: Join build queue with optimistic lock
        id: join-queue
        run: |
          source .github/workflows/scripts/queue-manager.sh
          
          # 使用队列管理器加入队列
          echo "Starting queue join process..."
          join_result=$(queue_manager "join" "$TRIGGER_DATA" "5")
          
          # 检查加入结果
          if [ $? -eq 0 ]; then
            echo "✅ Successfully joined queue"
            echo "join_success=true" >> $GITHUB_OUTPUT
            echo "queue_position=1" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to join queue"
            echo "join_success=false" >> $GITHUB_OUTPUT
            echo "queue_position=-1" >> $GITHUB_OUTPUT
          fi
          

          
  # 03-等待队列
  wait-queue:
    needs: [trigger, review, join-queue]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY: ${{ github.repository }}
    runs-on: ubuntu-latest
    outputs:
      lock_acquired: ${{ steps.wait-queue.outputs.lock_acquired }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        

        
      - name: Wait for queue turn
        id: wait-queue
        run: |
          source .github/workflows/scripts/queue-manager.sh

          # 直接使用GitHub Actions的run_id作为build_id
          build_id="${{ github.run_id }}"
          
          # 使用队列管理器获取构建锁
          lock_result=$(queue_manager "acquire" "$QUEUE_ISSUE_NUMBER" "$build_id" "1")

          # 检查获取锁的结果
          if [ $? -eq 0 ]; then
            echo "✅ Successfully acquired build lock"
            echo "lock_acquired=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to acquire build lock"
            echo "lock_acquired=false" >> $GITHUB_OUTPUT
          fi
          

          
  # 04-执行构建
  build:
    needs: [trigger, review, join-queue, wait-queue]
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.build.outputs.build_success }}
      download_url: ${{ steps.build.outputs.download_url }}
      error_message: ${{ steps.build.outputs.error_message }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Execute build process
        id: build
        env:
          TRIGGER_DATA: ${{ needs.trigger.outputs.trigger_data }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          source .github/workflows/scripts/build.sh
          
          # 提取数据
          extracted_data=$(build_manager "extract-data" "$TRIGGER_DATA")
          
          # 如果需要暂停测试
          if [ "300" -gt 0 ]; then
            echo "Pausing build for queue test: 300 seconds"
            build_manager "pause" "" "300"
          fi
          
          # 处理构建数据
          processed_data=$(build_manager "process-data" "$extracted_data")
          
          # 输出构建数据
          build_manager "output-data" "$processed_data"
          

          
  # 05-完成处理
  finish:
    needs: [trigger, review, join-queue, wait-queue, build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Complete cleanup phase
        id: finish
        env:
          TRIGGER_DATA: ${{ needs.trigger.outputs.trigger_data }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          source .github/workflows/scripts/finish.sh
          
          # 确定构建状态
          if [ "${{ needs.build.result }}" = "success" ]; then
            build_status="success"
            download_url="${{ needs.build.outputs.download_url }}"
            error_message="${{ needs.build.outputs.error_message }}"
          else
            build_status="failure"
            download_url=""
            error_message="构建过程中发生错误"
          fi
          
          # 解析构建数据
          tag=$(echo "$TRIGGER_DATA" | jq -r '.tag // empty')
          customer=$(echo "$TRIGGER_DATA" | jq -r '.customer // empty')
          email=$(echo "$TRIGGER_DATA" | jq -r '.email // empty')
          build_id="$GITHUB_RUN_ID"
          
          # 设置完成环境
          finish_manager "setup-environment" "$TRIGGER_DATA" "$build_status" "$download_url" "$error_message"
          
          # 获取构建参数（如果需要解密）
          if [ "$build_status" = "success" ]; then
            build_params=$(finish_manager "get-params" "$TRIGGER_DATA" "$build_status" "$download_url" "$error_message" "$build_id")
            if [ $? -eq 0 ]; then
              eval "$build_params"
            fi
          fi
          
          # 生成完成通知
          notification=$(generate_completion_notification "$build_status" "$tag" "$customer" "$download_url" "$error_message")
          
          # 发送通知
          notification_sent="false"
          if [ -n "$EMAIL" ]; then
            subject="Custom Rustdesk Build - $build_status"
            finish_manager "send-notification" "$TRIGGER_DATA" "$build_status" "$download_url" "$error_message" "$EMAIL" "$subject" "$notification"
            notification_sent="true"
          fi
          
          # 清理构建环境
          finish_manager "cleanup" "$TRIGGER_DATA" "$build_status" "$download_url" "$error_message" "$build_id"
          cleanup_completed="true"
          
          # 释放构建锁
          lock_released=$(finish_manager "release-lock" "$TRIGGER_DATA" "$build_status" "$download_url" "$error_message" "$build_id")
          
          # 输出完成数据
          finish_manager "output-data" "$TRIGGER_DATA" "$build_status" "$download_url" "$error_message" "$notification_sent" "$cleanup_completed" "$lock_released" 
          
 
