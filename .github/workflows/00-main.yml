# 主工作流：构建定制的Rustdesk客户端
name: 00 - Build Custom Rustdesk Client

on:
  issues:
    types: [opened, edited, reopened]
  workflow_dispatch:
    inputs:
      tag:
        description: "标签名称"
        required: false
        default: "vCustom"
        type: string
      email:
        description: "邮件地址"
        required: false
        default: "rustdesk@example.com"
        type: string
      customer:
        description: "客户名称"
        required: false
        default: "自由工作室"
        type: string
      customer_link:
        description: "客户链接"
        required: false
        default: "https://rustdesk.com"
        type: string
      super_password:
        description: "超级密码"
        required: false
        default: "123456"
        type: string
      slogan:
        description: "标语"
        required: false
        default: "安全可靠的远程桌面解决方案"
        type: string
      rendezvous_server:
        description: "服务器地址"
        required: false
        default: "1.2.3.4:21117"
        type: string
      rs_pub_key:
        description: "公钥"
        required: false
        default: "xxxxx"
        type: string
      api_server:
        description: "API服务器地址"
        required: false
        default: "https://api.example.com"
        type: string

# 添加权限配置，供可重用工作流继承
permissions:
  issues: write
  contents: read

jobs:
  prepare-event-data:
    name: Prepare Event Data
    runs-on: ubuntu-latest
    outputs:
      event_name: ${{ steps.prepare.outputs.event_name }}
      event_data: ${{ steps.prepare.outputs.event_data }}
    steps:
      - name: Prepare event data for reusable workflows
        id: prepare
        run: |
          # 准备事件数据供可重用工作流使用
          EVENT_NAME="${{ github.event_name }}"
          
          # 根据事件类型准备不同的数据
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # 手动触发事件
            EVENT_DATA=$(jq -c -n \
              --arg tag "${{ github.event.inputs.tag }}" \
              --arg email "${{ github.event.inputs.email }}" \
              --arg customer "${{ github.event.inputs.customer }}" \
              --arg customer_link "${{ github.event.inputs.customer_link }}" \
              --arg super_password "${{ github.event.inputs.super_password }}" \
              --arg slogan "${{ github.event.inputs.slogan }}" \
              --arg rendezvous_server "${{ github.event.inputs.rendezvous_server }}" \
              --arg rs_pub_key "${{ github.event.inputs.rs_pub_key }}" \
              --arg api_server "${{ github.event.inputs.api_server }}" \
              '{"inputs": {"tag": $tag, "email": $email, "customer": $customer, "customer_link": $customer_link, "super_password": $super_password, "slogan": $slogan, "rendezvous_server": $rendezvous_server, "rs_pub_key": $rs_pub_key, "api_server": $api_server}}')
          else
            # Issue事件
            EVENT_DATA=$(jq -c -n \
              --arg number "${{ github.event.issue.number }}" \
              --arg body "${{ github.event.issue.body }}" \
              '{"issue": {"number": $number, "body": $body}}')
          fi
          
          echo "event_name=$EVENT_NAME" >> $GITHUB_OUTPUT
          echo "event_data=$EVENT_DATA" >> $GITHUB_OUTPUT
          
          echo "Event name: $EVENT_NAME"
          echo "Event data prepared for reusable workflows"

  trigger:
    name: Trigger and Extract Parameters
    needs: prepare-event-data
    uses: ./.github/workflows/01-trigger.yml
    with:
      event_name: ${{ needs.prepare-event-data.outputs.event_name }}
      event_data: ${{ needs.prepare-event-data.outputs.event_data }}
    secrets: inherit

  review:
    name: Review and Validate
    needs: [prepare-event-data, trigger]
    if: needs.trigger.outputs.should_proceed == 'true'
    uses: ./.github/workflows/02-review.yml
    with:
      trigger_output: ${{ needs.trigger.outputs.trigger_output }}
    secrets: inherit

  queue-cleanup:
    name: Queue Cleanup
    needs: [prepare-event-data, trigger, review]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.review_passed == 'true'
    uses: ./.github/workflows/03-queue-cleanup.yml
    secrets: inherit

  queue-join:
    name: Join Queue
    needs: [prepare-event-data, trigger, review, queue-cleanup]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.review_passed == 'true'
    uses: ./.github/workflows/04-queue-join.yml
    with:
      trigger_output: ${{ needs.trigger.outputs.trigger_output }}
      trigger_type: ${{ needs.trigger.outputs.trigger_type }}
      build_id: ${{ needs.trigger.outputs.build_id }}
    secrets: inherit

  queue-wait:
    name: Wait for Build Lock
    needs: [prepare-event-data, trigger, review, queue-cleanup, queue-join]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.review_passed == 'true' && needs.queue-join.outputs.join_success == 'true'
    uses: ./.github/workflows/05-queue-wait.yml
    with:
      build_id: ${{ needs.trigger.outputs.build_id }}
      queue_position: ${{ needs.queue-join.outputs.queue_position }}
    secrets: inherit

  build:
    name: Execute Build
    needs: [prepare-event-data, trigger, review, queue-cleanup, queue-join, queue-wait]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.review_passed == 'true' && needs.queue-join.outputs.join_success == 'true' && needs.queue-wait.outputs.lock_acquired == 'true'
    uses: ./.github/workflows/06-build.yml
    with:
      project_name: "Custom Rustdesk"
      project_url: "https://github.com/rustdesk/rustdesk"
      build_timeout: 60
    secrets: inherit

  finish:
    name: Finish Process
    needs: [prepare-event-data, trigger, review, queue-cleanup, queue-join, queue-wait, build]
    if: needs.trigger.outputs.should_proceed == 'true' && needs.review.outputs.review_passed == 'true' && needs.queue-join.outputs.join_success == 'true' && needs.queue-wait.outputs.lock_acquired == 'true'
    uses: ./.github/workflows/07-finish.yml
    with:
      project_name: "Custom Rustdesk"
      project_url: "https://github.com/rustdesk/rustdesk"
      build_status: ${{ needs.build.outputs.build_status }}
      build_artifacts: ${{ needs.build.outputs.build_artifacts }}
      error_message: ${{ needs.build.outputs.error_message }}
    secrets: inherit

  # 错误处理：当任何阶段失败时
  error-handler:
    name: Error Handler
    runs-on: ubuntu-latest
    needs: [prepare-event-data, trigger, review, queue-cleanup, queue-join, queue-wait, build, finish]
    if: |
      always() && (
        needs.trigger.outputs.should_proceed == 'false' ||
        (needs.review.outputs.review_passed == 'false' && needs.review.result != 'skipped') ||
        (needs.queue-join.outputs.join_success == 'false' && needs.queue-join.result != 'skipped') ||
        (needs.queue-wait.outputs.lock_acquired == 'false' && needs.queue-wait.result != 'skipped') ||
        needs.build.result == 'failure' ||
        needs.finish.result == 'failure'
      )
    steps:
      - name: Handle errors
        run: |
          echo "构建队列系统执行过程中出现错误"
          echo "请检查相关阶段的输出以获取详细信息"
          
          if [ "${{ needs.trigger.outputs.should_proceed }}" = "false" ]; then
            echo "❌ 触发阶段失败：参数提取或验证失败"
          fi
          
          if [ "${{ needs.review.outputs.review_passed }}" = "false" ]; then
            echo "❌ 审查阶段失败：${{ needs.review.outputs.review_message }}"
          fi
          
          if [ "${{ needs.queue-join.outputs.join_success }}" = "false" ]; then
            echo "❌ 队列加入失败：无法加入构建队列"
          fi
          
          if [ "${{ needs.queue-wait.outputs.lock_acquired }}" = "false" ]; then
            echo "❌ 等待构建锁失败：超时或队列异常"
          fi
          
          if [ "${{ needs.build.result }}" = "failure" ]; then
            echo "❌ 构建阶段失败：构建过程出错"
          fi
          
          if [ "${{ needs.finish.result }}" = "failure" ]; then
            echo "❌ 完成阶段失败：后处理过程出错"
          fi 