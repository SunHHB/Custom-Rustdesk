name: 04 - Queue Join

on:
  workflow_run:
    workflows: ["03 - Queue Cleanup"]
    types: [completed]

# 添加权限配置
permissions:
  issues: write
  contents: read

jobs:
  queue_join:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Get review workflow data
        id: get_data
        run: |
          # 获取审核工作流的数据
          REVIEW_RUN_ID="${{ github.event.workflow_run.id }}"
          
          # 获取审核工作流的输出
          REVIEW_OUTPUT=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$REVIEW_RUN_ID/jobs" | \
            jq -r '.jobs[0].steps[] | select(.name == "Output data") | .outputs.review_output // empty')
          
          if [ -z "$REVIEW_OUTPUT" ]; then
            echo "❌ Failed to get review workflow data"
            exit 1
          fi
          
          echo "REVIEW_OUTPUT=$REVIEW_OUTPUT" >> $GITHUB_ENV
          
          # 获取触发类型和构建ID
          TRIGGER_RUN_ID=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$REVIEW_RUN_ID/jobs" | \
            jq -r '.jobs[0].steps[] | select(.name == "Get trigger workflow data") | .outputs.trigger_type // empty')
          
          echo "TRIGGER_TYPE=$TRIGGER_RUN_ID" >> $GITHUB_ENV
      
      - name: Extract data
        id: extract
        run: |
          # 从review阶段获取数据
          INPUT='${{ env.REVIEW_OUTPUT }}'
          
          # 验证输入JSON格式
          echo "Validating input JSON format..."
          echo "$INPUT" | jq . > /dev/null
          echo "Input JSON validation passed"
          
          # 设置环境变量供后续步骤使用
          echo "CURRENT_DATA=$INPUT" >> $GITHUB_ENV
          
          # 获取触发方式
          if [ "${{ env.TRIGGER_TYPE }}" = "workflow_dispatch" ]; then
            echo "TRIGGER_TYPE=workflow_dispatch" >> $GITHUB_ENV
            echo "QUEUE_LIMIT=5" >> $GITHUB_ENV
          else
            echo "TRIGGER_TYPE=issue" >> $GITHUB_ENV
            echo "QUEUE_LIMIT=3" >> $GITHUB_ENV
          fi

      - name: Auto cleanup queue
        run: |
          # 自动清理队列，处理异常锁和卡住的状态
          echo "Starting automatic queue cleanup..."
          
          # 加载共享工具函数
          source .github/workflows/shared/github-utils.yml
          
          # 重试机制参数
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          # 重试清理队列
          for attempt in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $attempt of $MAX_RETRIES to cleanup queue..."
            
            QUEUE_MANAGER_ISSUE="1"
            QUEUE_MANAGER_CONTENT=$(get_queue_manager_content "$QUEUE_MANAGER_ISSUE")
            QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
            
            # 如果解析JSON失败，直接重置
            if [ -z "$QUEUE_DATA" ] || ! echo "$QUEUE_DATA" | jq . > /dev/null 2>&1; then
              echo "❌ JSON parsing failed, resetting queue template"
              reset_queue_to_default "$QUEUE_MANAGER_ISSUE" "JSON解析失败，重置为默认模板"
              echo "✅ Queue reset triggered"
              break
            fi
            
            # 获取当前状态
            CURRENT_VERSION=$(echo "$QUEUE_DATA" | jq -r '.version // 1')
            LOCK_RUN_ID=$(echo "$QUEUE_DATA" | jq -r '.run_id // null')
            QUEUE=$(echo "$QUEUE_DATA" | jq -r '.queue // []')
            
            echo "Current version: $CURRENT_VERSION"
            echo "Lock run_id: $LOCK_RUN_ID"
            echo "Queue: $QUEUE"
            
            # 检查需要清理的项目
            NEED_CLEANUP=false
            CLEANUP_REASONS=()
            
            # 1. 检查锁超时（超过2小时）
            if [ "$LOCK_RUN_ID" != "null" ]; then
              LOCK_ISSUE_JOIN_TIME=$(echo "$QUEUE" | \
                jq -r --arg run_id "$LOCK_RUN_ID" \
                '.[] | select(.issue_number == $run_id) | .join_time // empty' 2>/dev/null || echo "")
              
              if [ -n "$LOCK_ISSUE_JOIN_TIME" ]; then
                JOIN_TIMESTAMP=$(date -d "$LOCK_ISSUE_JOIN_TIME" +%s 2>/dev/null || echo "0")
                CURRENT_TIMESTAMP=$(date +%s)
                LOCK_DURATION_HOURS=$(( (CURRENT_TIMESTAMP - JOIN_TIMESTAMP) / 3600 ))
                
                if [ "$LOCK_DURATION_HOURS" -ge 2 ]; then
                  NEED_CLEANUP=true
                  CLEANUP_REASONS+=("锁超时：已占用${LOCK_DURATION_HOURS}小时")
                  echo "❌ Lock timeout: ${LOCK_DURATION_HOURS} hours"
                fi
              else
                NEED_CLEANUP=true
                CLEANUP_REASONS+=("锁异常：找不到锁持有时间")
                echo "❌ Lock anomaly: no join time found"
              fi
            fi
            
            # 2. 检查重复项
            if [ "$(echo "$QUEUE" | jq -r 'type')" = "array" ]; then
              DUPLICATE_ITEMS=$(echo "$QUEUE" | \
                jq -r 'group_by(.issue_number) | .[] | select(length > 1) | .[0].issue_number' 2>/dev/null || echo "")
              
              if [ -n "$DUPLICATE_ITEMS" ]; then
                NEED_CLEANUP=true
                CLEANUP_REASONS+=("队列重复：构建项目 $DUPLICATE_ITEMS 重复")
                echo "❌ Duplicate items: $DUPLICATE_ITEMS"
              fi
            fi
            
            # 3. 检查无效issue
            if [ "$(echo "$QUEUE" | jq -r 'type')" = "array" ]; then
              INVALID_ISSUES=()
              for issue_number in $(echo "$QUEUE" | jq -r '.[].issue_number'); do
                ISSUE_RESPONSE=$(curl -s \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number")
                
                if echo "$ISSUE_RESPONSE" | jq -e '.message' | grep -q "Not Found"; then
                  INVALID_ISSUES+=("$issue_number")
                  echo "❌ Issue #$issue_number not found"
                fi
              done
              
              if [ ${#INVALID_ISSUES[@]} -gt 0 ]; then
                NEED_CLEANUP=true
                CLEANUP_REASONS+=("无效issue：${INVALID_ISSUES[*]} 不存在")
                echo "❌ Invalid issues: ${INVALID_ISSUES[*]}"
              fi
            fi
            
            # 4. 检查已结束的runs
            if [ "$(echo "$QUEUE" | jq -r 'type')" = "array" ]; then
              EXPIRED_RUNS=()
              for run_id in $(echo "$QUEUE" | jq -r '.[] | select(.trigger_type == "workflow_dispatch") | .issue_number'); do
                # 检查workflow run是否存在且未完成
                RUN_RESPONSE=$(curl -s \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id")
                
                if echo "$RUN_RESPONSE" | jq -e '.message' | grep -q "Not Found"; then
                  EXPIRED_RUNS+=("$run_id")
                  echo "❌ Run #$run_id not found"
                else
                  # 检查run状态：completed, cancelled, failure, skipped 都是已结束状态
                  RUN_STATUS=$(echo "$RUN_RESPONSE" | jq -r '.status // "unknown"')
                  RUN_CONCLUSION=$(echo "$RUN_RESPONSE" | jq -r '.conclusion // "unknown"')
                  
                  if [ "$RUN_STATUS" = "completed" ] || [ "$RUN_STATUS" = "cancelled" ] || [ "$RUN_STATUS" = "failure" ] || [ "$RUN_STATUS" = "skipped" ]; then
                    EXPIRED_RUNS+=("$run_id")
                    echo "❌ Run #$run_id ended with status: $RUN_STATUS, conclusion: $RUN_CONCLUSION"
                  fi
                fi
              done
              
              if [ ${#EXPIRED_RUNS[@]} -gt 0 ]; then
                NEED_CLEANUP=true
                CLEANUP_REASONS+=("已结束runs：${EXPIRED_RUNS[*]} 已完成/取消/失败/跳过或不存在")
                echo "❌ Expired runs: ${EXPIRED_RUNS[*]}"
              fi
            fi
            
            # 执行清理
            if [ "$NEED_CLEANUP" = true ]; then
              echo "Performing queue cleanup..."
              echo "Cleanup reasons: ${CLEANUP_REASONS[*]}"
              
              # 开始清理数据
              CLEANED_QUEUE_DATA=$(echo "$QUEUE_DATA" | \
                jq --arg new_version "$((CURRENT_VERSION + 1))" '
                # 移除重复项
                .queue = (.queue | group_by(.issue_number) | map(.[0]))
                # 重置异常锁
                | .run_id = null
                | .version = ($new_version | tonumber)
              ')
              
              # 移除无效issue
              if [ ${#INVALID_ISSUES[@]} -gt 0 ]; then
                for invalid_issue in "${INVALID_ISSUES[@]}"; do
                  CLEANED_QUEUE_DATA=$(echo "$CLEANED_QUEUE_DATA" | \
                    jq --arg issue_number "$invalid_issue" \
                    '.queue = (.queue | map(select(.issue_number != $issue_number)))')
                done
              fi
              
              # 移除已结束的runs
              if [ ${#EXPIRED_RUNS[@]} -gt 0 ]; then
                for expired_run in "${EXPIRED_RUNS[@]}"; do
                  CLEANED_QUEUE_DATA=$(echo "$CLEANED_QUEUE_DATA" | \
                    jq --arg run_id "$expired_run" \
                    '.queue = (.queue | map(select(.issue_number != $run_id)))')
                done
              fi
              
              # 计算清理后的队列数量
              CLEANED_TOTAL_COUNT=$(echo "$CLEANED_QUEUE_DATA" | jq '.queue | length // 0')
              CLEANED_ISSUE_COUNT=$(echo "$CLEANED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
              CLEANED_WORKFLOW_COUNT=$(echo "$CLEANED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
              
              echo "Cleaned queue data: $CLEANED_QUEUE_DATA"
              echo "Cleaned counts - Total: $CLEANED_TOTAL_COUNT, Issue: $CLEANED_ISSUE_COUNT, Workflow: $CLEANED_WORKFLOW_COUNT"
              
              # 构建清理原因文本
              CLEANUP_REASON_TEXT=""
              for reason in "${CLEANUP_REASONS[@]}"; do
                CLEANUP_REASON_TEXT="${CLEANUP_REASON_TEXT}• $reason\n"
              done
              
              # 更新队列管理issue
              UPDATED_BODY="## 构建队列管理\n\n**最后更新时间：** \$(date '+%Y-%m-%d %H:%M:%S')\n\n### 当前状态\n- **构建锁状态：** 空闲 🔓 (已清理)\n- **当前构建：** 无\n- **锁持有者：** 无\n- **版本：** \$(echo \"$CLEANED_QUEUE_DATA\" | jq -r '.version')\n\n### 构建队列\n- **当前数量：** $CLEANED_TOTAL_COUNT/5\n- **Issue触发：** $CLEANED_ISSUE_COUNT/3\n- **手动触发：** $CLEANED_WORKFLOW_COUNT/5\n\n---\n\n### 清理记录\n**清理时间：** \$(date '+%Y-%m-%d %H:%M:%S')\n**清理原因：**\n$CLEANUP_REASON_TEXT\n### 队列数据\n\`\`\`json\n$CLEANED_QUEUE_DATA\n\`\`\`"
              
              # 尝试更新队列管理issue
              if update_queue_issue "$QUEUE_MANAGER_ISSUE" "$UPDATED_BODY"; then
                echo "✅ Queue cleanup successful on attempt $attempt"
                echo "Queue cleanup completed successfully!"
                echo "Cleaned total count: $CLEANED_TOTAL_COUNT"
                echo "Cleaned issue count: $CLEANED_ISSUE_COUNT"
                echo "Cleaned workflow count: $CLEANED_WORKFLOW_COUNT"
                
                # 保存清理后的数据供后续使用（使用jq -c生成单行JSON）
                echo "CLEANED_QUEUE_DATA=$(echo "$CLEANED_QUEUE_DATA" | jq -c .)" >> $GITHUB_ENV
                echo "QUEUE_CLEANED=true" >> $GITHUB_ENV
                break
              else
                echo "❌ Queue cleanup failed on attempt $attempt"
                if [ "$attempt" -lt "$MAX_RETRIES" ]; then
                  echo "Retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
                else
                  echo "Max retries reached, continuing without cleanup..."
                  echo "QUEUE_CLEANED=false" >> $GITHUB_ENV
                  break
                fi
              fi
            else
              echo "No cleanup needed, queue is healthy"
              echo "QUEUE_CLEANED=false" >> $GITHUB_ENV
              break
            fi
          done

      - name: Check queue status
        id: check_queue
        run: |
          # 获取当前队列状态
          echo "Checking current queue status..."
          
          # 加载共享工具函数
          source .github/workflows/shared/github-utils.yml
          
          # 检查是否已经清理过队列
          if [ "${{ env.QUEUE_CLEANED }}" = "true" ]; then
            echo "Using cleaned queue data from previous step"
            QUEUE_DATA='${{ env.CLEANED_QUEUE_DATA }}'
          else
            # 获取队列管理issue的内容
            QUEUE_MANAGER_ISSUE="1"
            QUEUE_MANAGER_CONTENT=$(get_queue_manager_content "$QUEUE_MANAGER_ISSUE")
            QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
            
            # 如果提取失败，直接退出
            if [ -z "$QUEUE_DATA" ]; then
              echo "❌ Failed to extract queue JSON, aborting."
              exit 1
            fi
            
            # 验证JSON格式
            if ! echo "$QUEUE_DATA" | jq . > /dev/null 2>&1; then
              echo "❌ Invalid JSON format in queue data, aborting."
              exit 1
            fi
            
            # 强制单行JSON
            QUEUE_DATA=$(echo "$QUEUE_DATA" | jq -c .)
          fi
          
          # 验证JSON格式
          echo "Validating JSON format..."
          echo "$QUEUE_DATA" | jq . > /dev/null
          echo "JSON validation passed"
          
          # 调试输出队列数据
          echo "Queue data: $QUEUE_DATA"
          echo "Queue data type: $(echo "$QUEUE_DATA" | jq -r 'type')"
          echo "Queue: $(echo "$QUEUE_DATA" | jq -r '.queue')"
          echo "Current build: $(echo "$QUEUE_DATA" | jq -r '.current_build')"
          echo "Lock holder: $(echo "$QUEUE_DATA" | jq -r '.lock_holder')"
          
          # 获取当前队列数量和类型统计
          TOTAL_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | length // 0')
          ISSUE_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
          WORKFLOW_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
          CURRENT_BUILD=$(echo "$QUEUE_DATA" | jq -r '.current_build // null')
          LOCK_HOLDER=$(echo "$QUEUE_DATA" | jq -r '.lock_holder // null')
          
          echo "Total queue count: $TOTAL_QUEUE_COUNT/5"
          echo "Issue queue count: $ISSUE_QUEUE_COUNT/3"
          echo "Workflow queue count: $WORKFLOW_QUEUE_COUNT/5"
          echo "Current build: $CURRENT_BUILD"
          echo "Lock holder: $LOCK_HOLDER"
          
          # 检查是否可以加入队列
          QUEUE_FULL=false
          REJECT_REASON=""
          
          # 根据触发类型检查队列限制
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            if [ "$ISSUE_QUEUE_COUNT" -ge 3 ]; then
              QUEUE_FULL=true
              REJECT_REASON="Issue触发队列已满 (当前: $ISSUE_QUEUE_COUNT/3)"
            fi
          else
            if [ "$TOTAL_QUEUE_COUNT" -ge 5 ]; then
              QUEUE_FULL=true
              REJECT_REASON="手动触发队列已满 (当前: $TOTAL_QUEUE_COUNT/5)"
            fi
          fi
          
          if [ "$QUEUE_FULL" = true ]; then
            echo "Queue is full: $REJECT_REASON"
            echo "QUEUE_FULL=true" >> $GITHUB_ENV
            echo "REJECT_REASON=$REJECT_REASON" >> $GITHUB_ENV
            
            # 计算预计等待时间（假设每个构建需要30分钟）
            ESTIMATED_WAIT=$((TOTAL_QUEUE_COUNT * 30))
            echo "ESTIMATED_WAIT=$ESTIMATED_WAIT" >> $GITHUB_ENV
          else
            echo "Queue has space"
            echo "QUEUE_FULL=false" >> $GITHUB_ENV
          fi
          
          # 保存队列数据供后续使用
          echo "QUEUE_DATA=$QUEUE_DATA" >> $GITHUB_ENV
          echo "CURRENT_BUILD=$CURRENT_BUILD" >> $GITHUB_ENV
          echo "LOCK_HOLDER=$LOCK_HOLDER" >> $GITHUB_ENV

      - name: Handle queue full
        if: env.QUEUE_FULL == 'true'
        run: |
          # 加载共享工具函数
          source .github/workflows/shared/github-utils.yml
          
          # 从Issue #1实时获取最新队列数据
          QUEUE_MANAGER_ISSUE="1"
          QUEUE_MANAGER_CONTENT=$(get_queue_manager_content "$QUEUE_MANAGER_ISSUE")
          QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
          
          # 如果提取失败，直接退出
          if [ -z "$QUEUE_DATA" ]; then
            echo "❌ Failed to extract queue JSON, aborting."
            exit 1
          fi
          
          # 验证JSON格式
          if ! echo "$QUEUE_DATA" | jq . > /dev/null 2>&1; then
            echo "❌ Invalid JSON format in queue data, aborting."
            exit 1
          fi
          
          # 强制单行JSON
          QUEUE_DATA=$(echo "$QUEUE_DATA" | jq -c .)

          TOTAL_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | length // 0')
          ISSUE_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
          WORKFLOW_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
          REJECT_REASON='${{ env.REJECT_REASON }}'
          ESTIMATED_WAIT='${{ env.ESTIMATED_WAIT }}'
          
          # 队列满员，拒绝请求
          REJECT_COMMENT="## ❌ 队列已满

          **拒绝原因：** $REJECT_REASON
          **当前队列状态：**
          - 总队列：$TOTAL_QUEUE_COUNT/5
          - Issue触发：$ISSUE_QUEUE_COUNT/3
          - 手动触发：$WORKFLOW_QUEUE_COUNT/5
          **预计等待时间：** 约${ESTIMATED_WAIT}分钟

          **建议：**
          - 请稍后重试
          - 或使用其他触发方式

          **时间：** $(date '+%Y-%m-%d %H:%M:%S')"
          
          # 只在issue模式下添加拒绝评论
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            # 获取原始issue编号
            ORIGINAL_ISSUE_NUMBER=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs" | \
              jq -r '.jobs[0].steps[] | select(.name == "Get review workflow data") | .outputs.trigger_type // empty')
            
            if [ -n "$ORIGINAL_ISSUE_NUMBER" ]; then
              add_issue_comment "$ORIGINAL_ISSUE_NUMBER" "$REJECT_COMMENT"
            fi
          fi
          
          # 退出工作流
          exit 1

      - name: Join queue
        if: env.QUEUE_FULL == 'false'
        run: |
          # 加入队列
          echo "Joining queue..."
          
          # 加载共享工具函数
          source .github/workflows/shared/github-utils.yml
          
          # 重试机制参数
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          # 获取当前构建信息
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            CURRENT_BUILD_ID=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs" | \
              jq -r '.jobs[0].steps[] | select(.name == "Get review workflow data") | .outputs.trigger_type // empty')
            CURRENT_BUILD_TITLE="Issue Build"
          else
            CURRENT_BUILD_ID="${{ github.run_id }}"
            CURRENT_BUILD_TITLE="Workflow Dispatch Build"
          fi
          CURRENT_USER="${{ github.actor }}"
          JOIN_TIME=$(date -Iseconds)
          
          # 创建队列项
          QUEUE_ITEM=$(jq -n \
            --arg issue_number "$CURRENT_BUILD_ID" \
            --arg issue_title "$CURRENT_BUILD_TITLE" \
            --arg user "$CURRENT_USER" \
            --arg join_time "$JOIN_TIME" \
            --arg trigger_type "$TRIGGER_TYPE" \
            '{
              issue_number: $issue_number,
              issue_title: $issue_title,
              user: $user,
              join_time: $join_time,
              trigger_type: $trigger_type
            }')
          
          echo "Queue item: $QUEUE_ITEM"
          
          # 重试加入队列
          for attempt in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $attempt of $MAX_RETRIES to join queue..."
            
            # 获取当前队列数据
            QUEUE_MANAGER_ISSUE="1"
            QUEUE_MANAGER_CONTENT=$(get_queue_manager_content "$QUEUE_MANAGER_ISSUE")
            QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
            
            # 调试输出
            echo "Debug: QUEUE_MANAGER_CONTENT length: $(echo "$QUEUE_MANAGER_CONTENT" | wc -c)"
            echo "Debug: Issue body preview: $(echo "$QUEUE_MANAGER_CONTENT" | jq -r '.body' | head -5)"
            echo "Debug: Extracted QUEUE_DATA: '$QUEUE_DATA'"
            
            # 如果提取失败，直接退出
            if [ -z "$QUEUE_DATA" ]; then
              echo "❌ Failed to extract queue JSON, aborting."
              echo "Debug: Issue body contains:"
              echo "$QUEUE_MANAGER_CONTENT" | jq -r '.body' | head -20
              exit 1
            fi
            
            # 验证JSON格式
            if ! echo "$QUEUE_DATA" | jq . > /dev/null 2>&1; then
              echo "❌ Invalid JSON format in queue data, aborting."
              exit 1
            fi
            
            # 强制单行JSON
            QUEUE_DATA=$(echo "$QUEUE_DATA" | jq -c .)
            
            # 获取当前版本号
            CURRENT_VERSION=$(echo "$QUEUE_DATA" | jq -r '.version // 1')
            echo "Current version: $CURRENT_VERSION"
            
            # 检查是否已经在队列中
            EXISTING_ITEM=$(echo "$QUEUE_DATA" | \
              jq -r --arg issue_number "$CURRENT_BUILD_ID" \
              '.queue[] | select(.issue_number == $issue_number) | .issue_number // empty')
            
            if [ -n "$EXISTING_ITEM" ]; then
              echo "✅ Already in queue, skipping join"
              break
            fi
            
            # 更新队列数据
            UPDATED_QUEUE_DATA=$(echo "$QUEUE_DATA" | \
              jq --argjson item "$QUEUE_ITEM" \
              --arg new_version "$((CURRENT_VERSION + 1))" \
              '.queue += [$item] | .version = ($new_version | tonumber)')
            
            echo "Updated queue data: $UPDATED_QUEUE_DATA"
            
            # 计算队列数量
            UPDATED_TOTAL_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | length // 0')
            UPDATED_ISSUE_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
            UPDATED_WORKFLOW_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
            
            echo "Updated counts - Total: $UPDATED_TOTAL_COUNT, Issue: $UPDATED_ISSUE_COUNT, Workflow: $UPDATED_WORKFLOW_COUNT"
            
            # 更新队列管理issue
            UPDATED_BODY="## 构建队列管理\n\n**最后更新时间：** \$(date '+%Y-%m-%d %H:%M:%S')\n\n### 当前状态\n- **构建锁状态：** 空闲 🔓\n- **当前构建：** 无\n- **锁持有者：** 无\n- **版本：** $((CURRENT_VERSION + 1))\n\n### 构建队列\n- **当前数量：** $UPDATED_TOTAL_COUNT/5\n- **Issue触发：** $UPDATED_ISSUE_COUNT/3\n- **手动触发：** $UPDATED_WORKFLOW_COUNT/5\n\n---\n\n### 队列数据\n\`\`\`json\n$UPDATED_QUEUE_DATA\n\`\`\`"
            
            # 在写入issue前，强制单行JSON
            UPDATED_QUEUE_DATA=$(echo "$UPDATED_QUEUE_DATA" | jq -c .)
            
            # 尝试更新issue
            if update_queue_issue "$QUEUE_MANAGER_ISSUE" "$UPDATED_BODY"; then
              echo "✅ Queue join successful on attempt $attempt"
              
              # 计算队列位置
              QUEUE_POSITION=$(echo "$UPDATED_QUEUE_DATA" | \
                jq -r --arg issue_number "$CURRENT_BUILD_ID" \
                '.queue | sort_by(.join_time) | map(.issue_number) | index($issue_number) // 0 | . + 1')
              
              # 根据触发类型设置队列限制
              if [ "$TRIGGER_TYPE" = "issue" ]; then
                QUEUE_LIMIT=3
              else
                QUEUE_LIMIT=5
              fi
              echo "QUEUE_POSITION=$QUEUE_POSITION" >> $GITHUB_ENV
              
              # 添加队列加入评论
              QUEUE_JOIN_COMMENT="## 已加入队列

              **队列位置：** $QUEUE_POSITION/$QUEUE_LIMIT (总队列)
              **预计等待时间：** 约$((UPDATED_TOTAL_COUNT * 30))分钟
              **状态：** 等待中 ⏳

              **当前队列状态：**
              - 总队列：$UPDATED_TOTAL_COUNT/5
              - Issue触发：$UPDATED_ISSUE_COUNT/3
              - 手动触发：$UPDATED_WORKFLOW_COUNT/5

              **队列信息：**
              - 加入时间：$(date '+%Y-%m-%d %H:%M:%S')
              - 触发方式：$TRIGGER_TYPE
              - 队列管理：Issue #$QUEUE_MANAGER_ISSUE"
              
              # 只在issue模式下发布评论
              if [ "$TRIGGER_TYPE" = "issue" ]; then
                # 获取原始issue编号
                ORIGINAL_ISSUE_NUMBER=$(curl -s \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs" | \
                  jq -r '.jobs[0].steps[] | select(.name == "Get review workflow data") | .outputs.trigger_type // empty')
                
                if [ -n "$ORIGINAL_ISSUE_NUMBER" ]; then
                  add_issue_comment "$ORIGINAL_ISSUE_NUMBER" "$QUEUE_JOIN_COMMENT"
                fi
              fi
              
              break
            else
              echo "❌ Queue join failed on attempt $attempt"
              if [ "$attempt" -lt "$MAX_RETRIES" ]; then
                echo "Retrying in $RETRY_DELAY seconds..."
                sleep $RETRY_DELAY
              else
                echo "Max retries reached, exiting..."
                exit 1
              fi
            fi
          done 