name: 01 - Trigger and Parameter Extraction

on:
  workflow_call:
    inputs:
      event_name:
        description: "Event name (issues or workflow_dispatch)"
        required: true
        type: string
      event_data:
        description: "Event data as JSON string"
        required: true
        type: string
    outputs:
      trigger_output:
        description: "Trigger workflow output data"
        value: ${{ jobs.trigger.outputs.trigger_output }}
      trigger_type:
        description: "Trigger type (issue or workflow_dispatch)"
        value: ${{ jobs.trigger.outputs.trigger_type }}
      build_id:
        description: "Build ID"
        value: ${{ jobs.trigger.outputs.build_id }}
      should_proceed:
        description: "Whether to proceed with the build"
        value: ${{ jobs.trigger.outputs.should_proceed }}

jobs:
  trigger:
    runs-on: ubuntu-latest
    outputs:
      trigger_output: ${{ toJson(steps.setup.outputs.data) }}
      trigger_type: ${{ steps.setup.outputs.trigger_type }}
      build_id: ${{ steps.setup.outputs.build_id }}
      should_proceed: ${{ steps.setup.outputs.should_proceed }}
    steps:
      - name: Setup framework
        id: setup
        run: |
          echo "Preparing environment..."
          
          # 解析事件数据
          EVENT_NAME="${{ inputs.event_name }}"
          EVENT_DATA='${{ inputs.event_data }}'
          
          # 判断触发方式并提取参数
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # 手动触发：使用workflow_dispatch输入参数
            echo "Manual trigger detected"
            TRIGGER_TYPE="workflow_dispatch"
            BUILD_ID="${{ github.run_id }}"
            
            # 从事件数据中提取参数
            TAG=$(echo "$EVENT_DATA" | jq -r '.inputs.tag // empty')
            EMAIL=$(echo "$EVENT_DATA" | jq -r '.inputs.email // empty')
            CUSTOMER=$(echo "$EVENT_DATA" | jq -r '.inputs.customer // empty')
            CUSTOMER_LINK=$(echo "$EVENT_DATA" | jq -r '.inputs.customer_link // empty')
            SUPER_PASSWORD=$(echo "$EVENT_DATA" | jq -r '.inputs.super_password // empty')
            SLOGAN=$(echo "$EVENT_DATA" | jq -r '.inputs.slogan // empty')
            RENDEZVOUS_SERVER=$(echo "$EVENT_DATA" | jq -r '.inputs.rendezvous_server // empty')
            RS_PUB_KEY=$(echo "$EVENT_DATA" | jq -r '.inputs.rs_pub_key // empty')
            API_SERVER=$(echo "$EVENT_DATA" | jq -r '.inputs.api_server // empty')
          else
            # Issue触发：从issue内容中提取参数
            echo "Issue trigger detected"
            TRIGGER_TYPE="issue"
            BUILD_ID=$(echo "$EVENT_DATA" | jq -r '.issue.number // empty')
            ISSUE_BODY=$(echo "$EVENT_DATA" | jq -r '.issue.body // empty')
            
            # 保存原始issue内容供后续使用
            echo "ORIGINAL_ISSUE_BODY=$ISSUE_BODY" >> $GITHUB_ENV
            
            # 使用grep和sed提取参数值 - 支持多种格式
            # 格式1: tag: 值 (新格式)
            # 格式2: --tag: 值 (旧格式)
            # 格式3: tag=值 (键值对格式)
            TAG=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?tag:\s*\K[^\r\n]+' | head -1 || echo "")
            EMAIL=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?email:\s*\K[^\r\n]+' | head -1 || echo "")
            CUSTOMER=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?customer:\s*\K[^\r\n]+' | head -1 || echo "")
            CUSTOMER_LINK=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?customer_link:\s*\K[^\r\n]+' | head -1 || echo "")
            SUPER_PASSWORD=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?super_password:\s*\K[^\r\n]+' | head -1 || echo "")
            SLOGAN=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?slogan:\s*\K[^\r\n]+' | head -1 || echo "")
            RENDEZVOUS_SERVER=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?rendezvous_server:\s*\K[^\r\n]+' | head -1 || echo "")
            RS_PUB_KEY=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?rs_pub_key:\s*\K[^\r\n]+' | head -1 || echo "")
            API_SERVER=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?api_server:\s*\K[^\r\n]+' | head -1 || echo "")
            
            # 如果新格式没有找到，尝试旧格式
            if [ -z "$TAG" ]; then
              TAG=$(echo "$ISSUE_BODY" | grep -oP '--tag:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$EMAIL" ]; then
              EMAIL=$(echo "$ISSUE_BODY" | grep -oP '--email:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$CUSTOMER" ]; then
              CUSTOMER=$(echo "$ISSUE_BODY" | grep -oP '--customer:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$CUSTOMER_LINK" ]; then
              CUSTOMER_LINK=$(echo "$ISSUE_BODY" | grep -oP '--customer_link:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$SUPER_PASSWORD" ]; then
              SUPER_PASSWORD=$(echo "$ISSUE_BODY" | grep -oP '--super_password:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$SLOGAN" ]; then
              SLOGAN=$(echo "$ISSUE_BODY" | grep -oP '--slogan:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$RENDEZVOUS_SERVER" ]; then
              RENDEZVOUS_SERVER=$(echo "$ISSUE_BODY" | grep -oP '--rendezvous_server:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$RS_PUB_KEY" ]; then
              RS_PUB_KEY=$(echo "$ISSUE_BODY" | grep -oP '--rs_pub_key:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$API_SERVER" ]; then
              API_SERVER=$(echo "$ISSUE_BODY" | grep -oP '--api_server:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            
            # 调试输出提取的参数
            echo "Extracted parameters:"
            echo "TAG: '$TAG'"
            echo "EMAIL: '$EMAIL'"
            echo "CUSTOMER: '$CUSTOMER'"
            echo "CUSTOMER_LINK: '$CUSTOMER_LINK'"
            echo "SUPER_PASSWORD: '$SUPER_PASSWORD'"
            echo "SLOGAN: '$SLOGAN'"
            echo "RENDEZVOUS_SERVER: '$RENDEZVOUS_SERVER'"
            echo "RS_PUB_KEY: '$RS_PUB_KEY'"
            echo "API_SERVER: '$API_SERVER'"
          fi
          
          # 检查关键参数是否为空，如果为空则使用secrets兜底
          if [ -z "$RENDEZVOUS_SERVER" ] || [ -z "$RS_PUB_KEY" ]; then
            echo "Using secrets fallback for missing critical parameters"
            TAG="${TAG:-${{ secrets.DEFAULT_TAG }}}"
            EMAIL="${EMAIL:-${{ secrets.DEFAULT_EMAIL }}}"
            CUSTOMER="${CUSTOMER:-${{ secrets.DEFAULT_CUSTOMER }}}"
            CUSTOMER_LINK="${CUSTOMER_LINK:-${{ secrets.DEFAULT_CUSTOMER_LINK }}}"
            SUPER_PASSWORD="${SUPER_PASSWORD:-${{ secrets.DEFAULT_SUPER_PASSWORD }}}"
            SLOGAN="${SLOGAN:-${{ secrets.DEFAULT_SLOGAN }}}"
            RENDEZVOUS_SERVER="${RENDEZVOUS_SERVER:-${{ secrets.DEFAULT_RENDEZVOUS_SERVER }}}"
            RS_PUB_KEY="${RS_PUB_KEY:-${{ secrets.DEFAULT_RS_PUB_KEY }}}"
            API_SERVER="${API_SERVER:-${{ secrets.DEFAULT_API_SERVER }}}"
          fi
          
          # 为tag添加时间标记，确保版本唯一性
          TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
          
          # 如果tag不为空，添加时间标记
          if [ -n "$TAG" ]; then
            # 检查tag是否已经包含时间标记（避免重复添加）
            if [[ "$TAG" =~ [0-9]{8}-[0-9]{6}$ ]]; then
              echo "Tag already contains timestamp: $TAG"
              FINAL_TAG="$TAG"
            else
              # 添加时间标记到tag
              FINAL_TAG="${TAG}-${TIMESTAMP}"
              echo "Added timestamp to tag: $FINAL_TAG"
            fi
          else
            # 如果tag为空，使用默认tag加时间标记
            FINAL_TAG="rustdesk-${TIMESTAMP}"
            echo "Using default tag with timestamp: $FINAL_TAG"
          fi
          
          # 生成初始JSON数据
          DATA=$(jq -c -n \
            --arg tag "$FINAL_TAG" \
            --arg original_tag "$TAG" \
            --arg email "$EMAIL" \
            --arg customer "$CUSTOMER" \
            --arg customer_link "$CUSTOMER_LINK" \
            --arg super_password "$SUPER_PASSWORD" \
            --arg slogan "$SLOGAN" \
            --arg rendezvous_server "$RENDEZVOUS_SERVER" \
            --arg rs_pub_key "$RS_PUB_KEY" \
            --arg api_server "$API_SERVER" \
            '{tag: $tag, original_tag: $original_tag, email: $email, customer: $customer, customer_link: $customer_link, super_password: $super_password, slogan: $slogan, rendezvous_server: $rendezvous_server, rs_pub_key: $rs_pub_key, api_server: $api_server}')
          
          # 存储输出
          echo "data=$DATA" >> $GITHUB_OUTPUT
          echo "trigger_type=$TRIGGER_TYPE" >> $GITHUB_OUTPUT
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "should_proceed=true" >> $GITHUB_OUTPUT
      
      - name: Overwrite issue content
        if: inputs.event_name == 'issues'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # 创建清理后的issue内容，保留原始标题和标签
          CLEANED_BODY="## 构建请求已处理

          **构建参数：**
          - 标签: ${{ fromJson(steps.setup.outputs.data).tag }}
          - 原始标签: ${{ fromJson(steps.setup.outputs.data).original_tag }}
          - 客户: ${{ fromJson(steps.setup.outputs.data).customer }}
          - 标语: ${{ fromJson(steps.setup.outputs.data).slogan }}

          **状态：** 构建已启动
          **时间：** $(date '+%Y-%m-%d %H:%M:%S')

          ---
          *敏感信息已自动清理，原始参数已安全保存*"
          
          # 使用jq正确转义JSON
          JSON_PAYLOAD=$(jq -n --arg body "$CLEANED_BODY" '{"body": $body}')
          
          # 获取issue编号
          ISSUE_NUMBER=$(echo '${{ inputs.event_data }}' | jq -r '.issue.number // empty')
          
          # 使用GitHub API更新issue
          curl -X PATCH \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$ISSUE_NUMBER \
            -d "$JSON_PAYLOAD"
      
      - name: Verify dependencies
        run: echo "Checking system dependencies"
      
      - name: Generate config
        run: |
          # 在同一个job中访问数据
          echo "Trigger type: ${{ steps.setup.outputs.trigger_type }}"
          echo "Build ID: ${{ steps.setup.outputs.build_id }}"
          echo "Tag: ${{ fromJson(steps.setup.outputs.data).tag }}"
          echo "Original Tag: ${{ fromJson(steps.setup.outputs.data).original_tag }}"
          echo "Customer: ${{ fromJson(steps.setup.outputs.data).customer }}"
          echo "Rendezvous Server: ${{ fromJson(steps.setup.outputs.data).rendezvous_server }}" 
          echo "api_server: ${{ fromJson(steps.setup.outputs.data).api_server }}"