name: 05 - Queue Wait

on:
  workflow_call:
    inputs:
      build_id:
        description: "Build ID"
        required: true
        type: string
      queue_position:
        description: "Position in queue"
        required: true
        type: string
    outputs:
      lock_acquired:
        description: "Whether lock was acquired"
        value: ${{ jobs.queue_wait.outputs.lock_acquired }}

jobs:
  queue_wait:
    runs-on: ubuntu-latest
    outputs:
      lock_acquired: ${{ steps.wait.outputs.lock_acquired }}
    steps:
      - name: Setup data
        id: setup
        run: |
          # 使用输入参数
          BUILD_ID='${{ inputs.build_id }}'
          QUEUE_POSITION='${{ inputs.queue_position }}'
          
          if [ -z "$BUILD_ID" ]; then
            echo "❌ No build ID provided"
            exit 1
          fi
          
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "QUEUE_POSITION=$QUEUE_POSITION" >> $GITHUB_ENV
      
      - name: Wait in queue
        id: wait
        env:
          ENCRYPTION_KEY: ${{ vars.ENCRYPTION_KEY }}
        run: |
          # 等待轮到自己的位置并获取构建锁
          echo "Waiting in queue and for build lock..."
          
          # 加载共享工具函数
          source .github/workflows/shared/github-utils.yml
          
          START_TIME=$(date +%s)
          TIMEOUT=21600  # 6小时超时
          
          # 获取当前构建标识符
          CURRENT_BUILD_ID="${{ env.BUILD_ID }}"
          echo "Current build ID: $CURRENT_BUILD_ID"
          
          # 如果刚刚加入队列且位置是1，直接开始构建
          if [ "${{ env.QUEUE_POSITION }}" = "1" ]; then
            echo "✅ Build is at front of queue, proceeding to build..."
            echo "lock_acquired=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 重试机制参数
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          # 否则等待并检查队列状态
          while [ $(($(date +%s) - START_TIME)) -lt $TIMEOUT ]; do
            echo "Checking queue position and lock status... ($(($(date +%s) - START_TIME))s elapsed)"
            
            # 获取队列数据
            QUEUE_MANAGER_ISSUE="1"
            QUEUE_MANAGER_CONTENT=$(get_queue_manager_content "$QUEUE_MANAGER_ISSUE")
            QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
            
            # 如果提取失败，直接退出
            if [ -z "$QUEUE_DATA" ]; then
              echo "❌ Failed to extract queue JSON, aborting."
              echo "lock_acquired=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # 验证JSON格式
            if ! echo "$QUEUE_DATA" | jq . > /dev/null 2>&1; then
              echo "❌ Invalid JSON format in queue data, aborting."
              echo "lock_acquired=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # 强制单行JSON
            QUEUE_DATA=$(echo "$QUEUE_DATA" | jq -c .)
            
            # 检查当前构建是否在队列中
            BUILD_IN_QUEUE=$(echo "$QUEUE_DATA" | \
              jq -r --arg build_id "$CURRENT_BUILD_ID" \
              '.queue | map(.build_id) | contains([$build_id])')
            
            if [ "$BUILD_IN_QUEUE" != "true" ]; then
              echo "❌ Build not found in queue, exiting..."
              echo "lock_acquired=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # 检查是否是首位
            CURRENT_POSITION=$(echo "$QUEUE_DATA" | \
              jq -r --arg build_id "$CURRENT_BUILD_ID" \
              '.queue | sort_by(.join_time) | map(.build_id) | index($build_id) // empty | . + 1')
            
            if [ "$CURRENT_POSITION" = "1" ]; then
              # 检查锁状态
              LOCK_RUN_ID=$(echo "$QUEUE_DATA" | jq -r '.run_id // null')
              
              if [ "$LOCK_RUN_ID" = "null" ]; then
                echo "✅ At front of queue and no lock, attempting to acquire lock..."
                
                # 获取当前队列项的数据
                CURRENT_ITEM=$(echo "$QUEUE_DATA" | \
                  jq -r --arg build_id "$CURRENT_BUILD_ID" \
                  '.queue[] | select(.build_id == $build_id)')
                
                if [ -z "$CURRENT_ITEM" ]; then
                  echo "❌ No item found for current build"
                  echo "lock_acquired=false" >> $GITHUB_OUTPUT
                  exit 1
                fi
                
                # 提取当前构建的公开信息
                CURRENT_TAG=$(echo "$CURRENT_ITEM" | jq -r '.tag // empty')
                CURRENT_CUSTOMER=$(echo "$CURRENT_ITEM" | jq -r '.customer // empty')
                CURRENT_CUSTOMER_LINK=$(echo "$CURRENT_ITEM" | jq -r '.customer_link // empty')
                CURRENT_SLOGAN=$(echo "$CURRENT_ITEM" | jq -r '.slogan // empty')
                
                echo "🔐 Parameters for current build:"
                echo "TAG: $CURRENT_TAG"
                echo "CUSTOMER: $CURRENT_CUSTOMER"
                echo "SLOGAN: $CURRENT_SLOGAN"
                
                # 重试获取锁
                for lock_attempt in $(seq 1 $MAX_RETRIES); do
                  echo "Lock attempt $lock_attempt of $MAX_RETRIES..."
                  
                  # 获取当前版本号
                  CURRENT_VERSION=$(echo "$QUEUE_DATA" | jq -r '.version // 1')
                  
                  # 尝试获取锁并更新顶层信息
                  UPDATED_QUEUE_DATA=$(echo "$QUEUE_DATA" | \
                    jq --arg run_id "$CURRENT_BUILD_ID" \
                    --arg new_version "$((CURRENT_VERSION + 1))" \
                    --arg tag "$CURRENT_TAG" \
                    --arg customer "$CURRENT_CUSTOMER" \
                    --arg customer_link "$CURRENT_CUSTOMER_LINK" \
                    --arg slogan "$CURRENT_SLOGAN" \
                    '.run_id = $run_id | .version = ($new_version | tonumber) | .tag = $tag | .customer = $customer | .customer_link = $customer_link | .slogan = $slogan')
                  
                  # 计算队列数量
                  UPDATED_TOTAL_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | length // 0')
                  UPDATED_ISSUE_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
                  UPDATED_WORKFLOW_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
                  
                  # 更新队列管理issue
                  UPDATED_BODY="## 构建队列管理\n\n**最后更新时间：** \$(date '+%Y-%m-%d %H:%M:%S')\n\n### 当前状态\n- **构建锁状态：** 占用 🔒 (build_id: $CURRENT_BUILD_ID)\n- **当前构建：** 队列首位\n- **锁持有者：** 构建ID: $CURRENT_BUILD_ID\n- **版本：** $((CURRENT_VERSION + 1))\n\n### 构建队列\n- **当前数量：** $UPDATED_TOTAL_COUNT/5\n- **Issue触发：** $UPDATED_ISSUE_COUNT/3\n- **手动触发：** $UPDATED_WORKFLOW_COUNT/5\n\n---\n\n### 队列数据\n\`\`\`json\n$UPDATED_QUEUE_DATA\n\`\`\`"
                  
                  if update_queue_issue "$QUEUE_MANAGER_ISSUE" "$UPDATED_BODY"; then
                    echo "✅ Lock acquired successfully on attempt $lock_attempt"
                    echo "lock_acquired=true" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "❌ Lock acquisition failed on attempt $lock_attempt"
                    if [ "$lock_attempt" -lt "$MAX_RETRIES" ]; then
                      echo "Retrying lock acquisition in $RETRY_DELAY seconds..."
                      sleep $RETRY_DELAY
                      
                      # 重新获取队列数据
                      QUEUE_MANAGER_CONTENT=$(get_queue_manager_content "$QUEUE_MANAGER_ISSUE")
                      QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
                      if [ -z "$QUEUE_DATA" ]; then
                        echo "❌ Failed to extract queue JSON during retry, aborting."
                        echo "lock_acquired=false" >> $GITHUB_OUTPUT
                        exit 1
                      fi
                      
                      # 验证JSON格式
                      if ! echo "$QUEUE_DATA" | jq . > /dev/null 2>&1; then
                        echo "❌ Invalid JSON format in queue data during retry, aborting."
                        echo "lock_acquired=false" >> $GITHUB_OUTPUT
                        exit 1
                      fi
                      
                      # 强制单行JSON
                      QUEUE_DATA=$(echo "$QUEUE_DATA" | jq -c .)
                    else
                      echo "Max lock retries reached, continuing without lock..."
                      echo "lock_acquired=false" >> $GITHUB_OUTPUT
                      exit 1
                    fi
                  fi
                done
              elif [ "$LOCK_RUN_ID" = "$CURRENT_BUILD_ID" ]; then
                echo "✅ Already holding lock, proceeding to build..."
                echo "lock_acquired=true" >> $GITHUB_OUTPUT
                exit 0
              else
                echo "Lock held by build_id: $LOCK_RUN_ID, waiting..."
                sleep 30
              fi
            else
              echo "Not at front of queue (position: $CURRENT_POSITION), waiting..."
              sleep 30
            fi
          done
          
          echo "❌ Timeout reached while waiting for lock"
          echo "lock_acquired=false" >> $GITHUB_OUTPUT
          exit 1 