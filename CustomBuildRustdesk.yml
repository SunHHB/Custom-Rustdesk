name: Custom Build Rustdesk

on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      tag:
        description: "标签名称"
        required: false
        default: "vCustom"
        type: string
      email:
        description: "邮件地址"
        required: false
        default: "rustdesk@example.com"
        type: string
      customer:
        description: "客户名称"
        required: false
        default: "自由工作室"
        type: string
      customer_link:
        description: "客户链接"
        required: false
        default: "https://rustdesk.com"
        type: string
      super_password:
        description: "超级密码"
        required: false
        default: "123456"
        type: string
      slogan:
        description: "标语"
        required: false
        default: "安全可靠的远程桌面解决方案"
        type: string
      rendezvous_server:
        description: "服务器地址"
        required: false
        default: "1.2.3.4:21117"
        type: string
      rs_pub_key:
        description: "公钥"
        required: false
        default: "xxxxx"
        type: string
      api_server:
        description: "API服务器地址"
        required: false
        default: "https://api.example.com"
        type: string

# 添加权限配置
permissions:
  issues: write
  contents: read

jobs:
  trigger: # 触发阶段
    runs-on: ubuntu-latest
    outputs:
      trigger_output: ${{ toJson(steps.setup.outputs.data) }}
    steps:
      - name: Setup framework
        id: setup
        run: |
          echo "Preparing environment..."
          
          # 判断触发方式并提取参数
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # 手动触发：使用workflow_dispatch输入参数
            echo "Manual trigger detected"
            TAG="${{ github.event.inputs.tag }}"
            EMAIL="${{ github.event.inputs.email }}"
            CUSTOMER="${{ github.event.inputs.customer }}"
            CUSTOMER_LINK="${{ github.event.inputs.customer_link }}"
            SUPER_PASSWORD="${{ github.event.inputs.super_password }}"
            SLOGAN="${{ github.event.inputs.slogan }}"
            RENDEZVOUS_SERVER="${{ github.event.inputs.rendezvous_server }}"
            RS_PUB_KEY="${{ github.event.inputs.rs_pub_key }}"
            API_SERVER="${{ github.event.inputs.api_server }}"
          else
            # Issue触发：从issue内容中提取参数
            echo "Issue trigger detected"
            ISSUE_BODY="${{ github.event.issue.body }}"
            
            # 保存原始issue内容供后续使用
            echo "ORIGINAL_ISSUE_BODY=$ISSUE_BODY" >> $GITHUB_ENV
            
            # 使用grep和sed提取参数值 - 支持多种格式
            # 格式1: tag: 值 (新格式)
            # 格式2: --tag: 值 (旧格式)
            # 格式3: tag=值 (键值对格式)
            TAG=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?tag:\s*\K[^\r\n]+' | head -1 || echo "")
            EMAIL=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?email:\s*\K[^\r\n]+' | head -1 || echo "")
            CUSTOMER=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?customer:\s*\K[^\r\n]+' | head -1 || echo "")
            CUSTOMER_LINK=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?customer_link:\s*\K[^\r\n]+' | head -1 || echo "")
            SUPER_PASSWORD=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?super_password:\s*\K[^\r\n]+' | head -1 || echo "")
            SLOGAN=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?slogan:\s*\K[^\r\n]+' | head -1 || echo "")
            RENDEZVOUS_SERVER=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?rendezvous_server:\s*\K[^\r\n]+' | head -1 || echo "")
            RS_PUB_KEY=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?rs_pub_key:\s*\K[^\r\n]+' | head -1 || echo "")
            API_SERVER=$(echo "$ISSUE_BODY" | grep -oP '(?:^|\n)(?:--)?api_server:\s*\K[^\r\n]+' | head -1 || echo "")
            
            # 如果新格式没有找到，尝试旧格式
            if [ -z "$TAG" ]; then
              TAG=$(echo "$ISSUE_BODY" | grep -oP '--tag:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$EMAIL" ]; then
              EMAIL=$(echo "$ISSUE_BODY" | grep -oP '--email:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$CUSTOMER" ]; then
              CUSTOMER=$(echo "$ISSUE_BODY" | grep -oP '--customer:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$CUSTOMER_LINK" ]; then
              CUSTOMER_LINK=$(echo "$ISSUE_BODY" | grep -oP '--customer_link:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$SUPER_PASSWORD" ]; then
              SUPER_PASSWORD=$(echo "$ISSUE_BODY" | grep -oP '--super_password:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$SLOGAN" ]; then
              SLOGAN=$(echo "$ISSUE_BODY" | grep -oP '--slogan:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$RENDEZVOUS_SERVER" ]; then
              RENDEZVOUS_SERVER=$(echo "$ISSUE_BODY" | grep -oP '--rendezvous_server:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$RS_PUB_KEY" ]; then
              RS_PUB_KEY=$(echo "$ISSUE_BODY" | grep -oP '--rs_pub_key:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            if [ -z "$API_SERVER" ]; then
              API_SERVER=$(echo "$ISSUE_BODY" | grep -oP '--api_server:\s*\K[^\r\n]+' | head -1 || echo "")
            fi
            
            # 调试输出提取的参数
            echo "Extracted parameters:"
            echo "TAG: '$TAG'"
            echo "EMAIL: '$EMAIL'"
            echo "CUSTOMER: '$CUSTOMER'"
            echo "CUSTOMER_LINK: '$CUSTOMER_LINK'"
            echo "SUPER_PASSWORD: '$SUPER_PASSWORD'"
            echo "SLOGAN: '$SLOGAN'"
            echo "RENDEZVOUS_SERVER: '$RENDEZVOUS_SERVER'"
            echo "RS_PUB_KEY: '$RS_PUB_KEY'"
            echo "API_SERVER: '$API_SERVER'"
          fi
          
          # 检查关键参数是否为空，如果为空则使用secrets兜底
          if [ -z "$RENDEZVOUS_SERVER" ] || [ -z "$RS_PUB_KEY" ]; then
            echo "Using secrets fallback for missing critical parameters"
            TAG="${TAG:-${{ secrets.DEFAULT_TAG }}}"
            EMAIL="${EMAIL:-${{ secrets.DEFAULT_EMAIL }}}"
            CUSTOMER="${CUSTOMER:-${{ secrets.DEFAULT_CUSTOMER }}}"
            CUSTOMER_LINK="${CUSTOMER_LINK:-${{ secrets.DEFAULT_CUSTOMER_LINK }}}"
            SUPER_PASSWORD="${SUPER_PASSWORD:-${{ secrets.DEFAULT_SUPER_PASSWORD }}}"
            SLOGAN="${SLOGAN:-${{ secrets.DEFAULT_SLOGAN }}}"
            RENDEZVOUS_SERVER="${RENDEZVOUS_SERVER:-${{ secrets.DEFAULT_RENDEZVOUS_SERVER }}}"
            RS_PUB_KEY="${RS_PUB_KEY:-${{ secrets.DEFAULT_RS_PUB_KEY }}}"
            API_SERVER="${API_SERVER:-${{ secrets.DEFAULT_API_SERVER }}}"
          fi
          
          # 生成初始JSON数据
          DATA=$(jq -c -n \
            --arg tag "$TAG" \
            --arg email "$EMAIL" \
            --arg customer "$CUSTOMER" \
            --arg customer_link "$CUSTOMER_LINK" \
            --arg super_password "$SUPER_PASSWORD" \
            --arg slogan "$SLOGAN" \
            --arg rendezvous_server "$RENDEZVOUS_SERVER" \
            --arg rs_pub_key "$RS_PUB_KEY" \
            --arg api_server "$API_SERVER" \
            '{tag: $tag, email: $email, customer: $customer, customer_link: $customer_link, super_password: $super_password, slogan: $slogan, rendezvous_server: $rendezvous_server, rs_pub_key: $rs_pub_key, api_server: $api_server}')
          
          # 存储输出
          echo "data=$DATA" >> $GITHUB_OUTPUT
      
      - name: Overwrite issue content
        if: github.event_name == 'issues'
        run: |
          # 创建清理后的issue内容，保留原始标题和标签
          CLEANED_BODY="## 构建请求已处理

          **构建参数：**
          - 标签: ${{ fromJson(steps.setup.outputs.data).tag }}
          - 客户: ${{ fromJson(steps.setup.outputs.data).customer }}
          - 标语: ${{ fromJson(steps.setup.outputs.data).slogan }}

          **状态：** 构建已启动
          **时间：** $(date '+%Y-%m-%d %H:%M:%S')

          ---
          *敏感信息已自动清理，原始参数已安全保存*"
          
          # 使用jq正确转义JSON
          JSON_PAYLOAD=$(jq -n --arg body "$CLEANED_BODY" '{"body": $body}')
          
          # 使用GitHub API更新issue
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }} \
            -d "$JSON_PAYLOAD"
      
      - name: Verify dependencies
        run: echo "Checking system dependencies"
      
      - name: Generate config
        run: |
          # 在同一个job中访问数据
          echo "Trigger type: ${{ github.event_name }}"
          echo "Tag: ${{ fromJson(steps.setup.outputs.data).tag }}"
          echo "Customer: ${{ fromJson(steps.setup.outputs.data).customer }}"
          echo "Rendezvous Server: ${{ fromJson(steps.setup.outputs.data).rendezvous_server }}"

  review: # 审核阶段
    needs: trigger
    runs-on: ubuntu-latest
    outputs:
      review_output: ${{ toJson(steps.output.outputs.data) }}
      build_approved: ${{ steps.output.outputs.build_approved }}
    steps:
      - name: Extract data
        id: extract
        run: |
          # 仅提取数据，不进行任何处理
          INPUT='${{ fromJson(needs.trigger.outputs.trigger_output) }}'
          
          # 提取服务器地址
          RENDEZVOUS_SERVER=$(echo "$INPUT" | jq -r '.rendezvous_server')
          API_SERVER=$(echo "$INPUT" | jq -r '.api_server')
          EMAIL=$(echo "$INPUT" | jq -r '.email')
          
          # 设置环境变量供后续步骤使用
          echo "RENDEZVOUS_SERVER=$RENDEZVOUS_SERVER" >> $GITHUB_ENV
          echo "API_SERVER=$API_SERVER" >> $GITHUB_ENV
          echo "EMAIL=$EMAIL" >> $GITHUB_ENV
          echo "CURRENT_DATA=$INPUT" >> $GITHUB_ENV
          
          # 验证JSON格式
          echo "Validating JSON format..."
          echo "$INPUT" | jq . > /dev/null
          echo "JSON validation passed"
      
      - name: Auto reject invalid server parameters
        run: |
          # 检查是否为有效的IP或域名格式
          is_valid_ip() {
            [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]+)?$ ]]
          }
          is_valid_domain() {
            [[ "$1" =~ ^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(:[0-9]+)?$ ]]
          }
          is_valid_url() {
            local url="$1"
            url="${url#http://}"
            url="${url#https://}"
            is_valid_ip "$url" || is_valid_domain "$url"
          }
          is_email() {
            [[ "$1" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]
          }
          
          # 调试输出
          echo "Validating parameters:"
          echo "RENDEZVOUS_SERVER: $RENDEZVOUS_SERVER"
          echo "API_SERVER: $API_SERVER"
          echo "EMAIL: $EMAIL"
          
          AUTO_REJECT_REASON=""
          
          # 检查rendezvous_server格式
          if ! is_valid_ip "$RENDEZVOUS_SERVER" && ! is_valid_domain "$RENDEZVOUS_SERVER"; then
            AUTO_REJECT_REASON="${AUTO_REJECT_REASON}• rendezvous_server 格式无效: $RENDEZVOUS_SERVER
          "
            echo "❌ rendezvous_server format invalid"
          else
            echo "✅ rendezvous_server format valid"
          fi
          
          # 检查api_server格式
          if ! is_valid_url "$API_SERVER"; then
            AUTO_REJECT_REASON="${AUTO_REJECT_REASON}• api_server 格式无效: $API_SERVER
          "
            echo "❌ api_server format invalid"
          else
            echo "✅ api_server format valid"
          fi
          
          # 检查email（如果提供）
          if [ -n "$EMAIL" ] && ! is_email "$EMAIL"; then
            AUTO_REJECT_REASON="${AUTO_REJECT_REASON}• email 格式非法: $EMAIL
          "
            echo "❌ email validation failed"
          else
            echo "✅ email validation passed"
          fi
          
          # 去掉最后多余的空行
          AUTO_REJECT_REASON=$(echo "$AUTO_REJECT_REASON" | sed '/^$/d')
          
          if [ -n "$AUTO_REJECT_REASON" ]; then
            echo "自动拒绝原因：$AUTO_REJECT_REASON"
            REJECT_COMMENT="## ❌ 构建被自动拒绝

          **拒绝原因：**
          $AUTO_REJECT_REASON

          **时间：** $(date '+%Y-%m-%d %H:%M:%S')
          请检查参数后重新提交issue。"
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d "$(jq -n --arg body "$REJECT_COMMENT" '{"body": $body}')"
            echo "BUILD_REJECTED=true" >> $GITHUB_ENV
            exit 0
          else
            echo "✅ All parameter validations passed"
          fi

      - name: Determine review requirement
        if: env.BUILD_REJECTED != 'true'
        run: |
          # 默认需要审核
          NEED_REVIEW=true

          # 仓库所有者免审核
          if [ "${{ github.actor }}" = "${{ github.repository_owner }}" ]; then
            echo "Repo owner detected, skipping review."
            NEED_REVIEW=false
          fi

          # 检查是否为私有IP地址
          check_private_ip() {
            local input="$1"
            local ip="$input"
            
            # 移除协议前缀
            ip="${ip#http://}"
            ip="${ip#https://}"
            
            # 移除端口号（如果有）
            ip=$(echo "$ip" | cut -d: -f1)
            
            echo "Checking IP: $ip (from: $input)"
            
            # 检查10.0.0.0/8
            if [[ "$ip" =~ ^10\. ]]; then
              echo "✅ 10.x.x.x private IP detected"
              return 0
            fi
            
            # 检查172.16.0.0/12
            if [[ "$ip" =~ ^172\.(1[6-9]|2[0-9]|3[0-1])\. ]]; then
              echo "✅ 172.16-31.x.x private IP detected"
              return 0
            fi
            
            # 检查192.168.0.0/16
            if [[ "$ip" =~ ^192\.168\. ]]; then
              echo "✅ 192.168.x.x private IP detected"
              return 0
            fi
            
            echo "❌ Public IP or domain detected: $ip"
            return 1
          }
          
          # 检查两个服务器地址
          RENDEZVOUS_PRIVATE=false
          API_PRIVATE=false
          
          echo "Checking Rendezvous Server: $RENDEZVOUS_SERVER"
          if check_private_ip "$RENDEZVOUS_SERVER"; then
            RENDEZVOUS_PRIVATE=true
            echo "Rendezvous server is private IP: $RENDEZVOUS_SERVER"
          else
            echo "Rendezvous server is public IP or domain: $RENDEZVOUS_SERVER"
          fi
          
          echo "Checking API Server: $API_SERVER"
          if check_private_ip "$API_SERVER"; then
            API_PRIVATE=true
            echo "API server is private IP: $API_SERVER"
          else
            echo "API server is public IP or domain: $API_SERVER"
          fi
          
          # 判断是否需要审核
          if [ "$NEED_REVIEW" = "false" ]; then
            echo "Skipping review due to repo owner or private IP check."
          else
            if [ "$RENDEZVOUS_PRIVATE" = "true" ] && [ "$API_PRIVATE" = "true" ]; then
              NEED_REVIEW=false
              echo "Both servers are private IPs - no review needed"
            else
              NEED_REVIEW=true
              echo "At least one server is public IP - review required"
            fi
          fi
          
          # 设置审核标记到环境变量，供后续步骤使用
          echo "NEED_REVIEW=$NEED_REVIEW" >> $GITHUB_ENV
      
      - name: Handle review process
        if: env.NEED_REVIEW == 'true' && env.BUILD_REJECTED != 'true'
        run: |
          echo "Review required. Starting review process..."
          
          # 在issue中添加审核状态
          REVIEW_COMMENT="## 🔍 审核状态

          **需要审核原因：** 检测到公网IP地址或域名
          - Rendezvous Server: $RENDEZVOUS_SERVER
          - API Server: $API_SERVER

          **审核要求：** 请管理员回复 '同意构建' 或 '拒绝构建'

          **状态：** 等待审核中 ⏳
          **时间：** $(date '+%Y-%m-%d %H:%M:%S')"
          
          # 使用jq正确转义JSON
          JSON_PAYLOAD=$(jq -n --arg body "$REVIEW_COMMENT" '{"body": $body}')

          # 添加审核评论
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -d "$(jq -n --arg body "$REVIEW_COMMENT" '{"body": $body}')"
          
          # 循环检查审核回复
          START_TIME=$(date +%s)
          TIMEOUT=21600  # 6小时超时
          APPROVED=false
          REJECTED=false # 新增变量，用于标记拒绝
          
          while [ $(($(date +%s) - START_TIME)) -lt $TIMEOUT ]; do
            echo "Checking for admin approval... ($(($(date +%s) - START_TIME))s elapsed)"
            
            # 获取issue的最新评论
            COMMENTS=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments)
            
            # 检查是否有管理员回复
            # 获取仓库所有者和管理员列表
            REPO_OWNER="${{ github.repository_owner }}"
            
            # 检查是否有管理员回复（包括仓库所有者）
            if echo "$COMMENTS" | jq -e --arg owner "$REPO_OWNER" '.[] | select(.user.login == $owner or .user.login == "admin" or .user.login == "管理员用户名") | select(.body | contains("同意构建"))' > /dev/null; then
              APPROVED=true
              break
            fi
            
            if echo "$COMMENTS" | jq -e --arg owner "$REPO_OWNER" '.[] | select(.user.login == $owner or .user.login == "admin" or .user.login == "管理员用户名") | select(.body | contains("拒绝构建"))' > /dev/null; then
              REJECTED=true
              break
            fi
            
            # 调试：输出最新的评论信息
            echo "Latest comments:"
            echo "$COMMENTS" | jq -r '.[-3:] | .[] | "User: \(.user.login), Body: \(.body[0:100])..."'
            
            # 等待30秒后再次检查
            sleep 30
          done
          
          if [ "$APPROVED" = true ]; then
            echo "Admin approval received"
            # 添加审核通过评论
            APPROVAL_COMMENT="## ✅ 审核通过
            **状态：** 审核已通过
            **审核人：** 管理员
            **时间：** $(date '+%Y-%m-%d %H:%M:%S')
            构建将继续进行..."
            
          # 使用jq正确转义JSON
          JSON_PAYLOAD=$(jq -n --arg body "$APPROVAL_COMMENT" '{"body": $body}')

            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d "$(jq -n --arg body "$APPROVAL_COMMENT" '{"body": $body}')"
          elif [ "$REJECTED" = true ]; then
            echo "Build rejected by admin"
            
            # 添加拒绝评论
            REJECT_COMMENT="## ❌ 构建被拒绝
            **状态：** 构建已被管理员拒绝
            **时间：** $(date '+%Y-%m-%d %H:%M:%S')
            构建流程已终止。如需重新构建，请重新提交issue。"
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d "$(jq -n --arg body "$REJECT_COMMENT" "{\"body\": \$body}")"
            
            echo "Build rejected by admin - setting build_approved to false"
            # 设置构建被拒绝标志
            echo "BUILD_REJECTED=true" >> $GITHUB_ENV
            exit 0
          else
            echo "Review timeout after 6 hours"
            # 添加超时评论
            TIMEOUT_COMMENT="## ⏰ 审核超时
            **状态：** 审核超时（6小时）
            **时间：** $(date '+%Y-%m-%d %H:%M:%S')
            构建将自动终止。如需重新构建，请重新提交issue。"
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d "$(jq -n --arg body "$TIMEOUT_COMMENT" '{"body": $body}')"
            
            exit 1
          fi

      - name: Output data
        if: env.BUILD_REJECTED != 'true'
        id: output
        run: |
          # 重新获取原始数据并确保JSON格式正确
          INPUT='${{ fromJson(needs.trigger.outputs.trigger_output) }}'
          
          # 确保输出的是有效的JSON格式
          echo "data=$INPUT" >> $GITHUB_OUTPUT
          
          # 根据标志设置构建批准状态
          if [ "${{ env.BUILD_REJECTED }}" = "true" ]; then
            echo "build_approved=false" >> $GITHUB_OUTPUT
            echo "Build was rejected by admin"
          elif [ "${{ env.BUILD_TIMEOUT }}" = "true" ]; then
            echo "build_approved=false" >> $GITHUB_OUTPUT
            echo "Build timed out during review"
          else
            echo "build_approved=true" >> $GITHUB_OUTPUT
            echo "Build was approved or no review needed"
          fi
          
          # 显示输出信息
          echo "Review output: $INPUT"
          
          # 验证输出的JSON格式
          echo "Validating output JSON format..."
          echo "$INPUT" | jq . > /dev/null
          echo "Output JSON validation passed"

  queue: # 排队阶段
    needs: [trigger, review]
    runs-on: ubuntu-latest
    if: needs.review.outputs.build_approved == 'true'
    steps:
      - name: Extract data
        id: extract
        run: |
          # 从trigger阶段获取数据
          INPUT='${{ fromJson(needs.trigger.outputs.trigger_output) }}'
          
          # 验证输入JSON格式
          echo "Validating input JSON format..."
          echo "$INPUT" | jq . > /dev/null
          echo "Input JSON validation passed"
          
          # 设置环境变量供后续步骤使用
          echo "CURRENT_DATA=$INPUT" >> $GITHUB_ENV
          
          # 获取触发方式
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TRIGGER_TYPE=workflow_dispatch" >> $GITHUB_ENV
            echo "QUEUE_LIMIT=5" >> $GITHUB_ENV
          else
            echo "TRIGGER_TYPE=issue" >> $GITHUB_ENV
            echo "QUEUE_LIMIT=3" >> $GITHUB_ENV
          fi

      - name: Auto cleanup queue
        run: |
          # 自动清理队列，处理异常锁和卡住的状态
          echo "Starting automatic queue cleanup..."
          
          # 重试机制参数
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          # 重试清理队列
          for attempt in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $attempt of $MAX_RETRIES to cleanup queue..."
            
            QUEUE_MANAGER_ISSUE="1"
            QUEUE_MANAGER_CONTENT=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
            
            # 检查issue是否存在
            if echo "$QUEUE_MANAGER_CONTENT" | jq -e '.message' | grep -q "Not Found"; then
              echo "Queue manager issue #$QUEUE_MANAGER_ISSUE not found, skipping cleanup"
              echo "QUEUE_CLEANED=false" >> $GITHUB_ENV
              exit 0
            fi
            
            # 提取JSON数据
            QUEUE_DATA=$(echo "$QUEUE_MANAGER_CONTENT" | jq -r '.body' | grep -oP '```json\s*\K[^{]*\{.*\}' | head -1)
            
            # 如果解析JSON失败，直接重置
            if [ -z "$QUEUE_DATA" ] || ! echo "$QUEUE_DATA" | jq . > /dev/null 2>&1; then
              echo "❌ JSON parsing failed, resetting queue template"
              RESET_QUEUE_DATA='{"queue":[],"run_id":null,"version":1}'
              
                            # 重置issue模板 - 使用简单的字符串拼接
              RESET_BODY="## 构建队列管理\n\n**最后更新时间：** \$(date '+%Y-%m-%d %H:%M:%S')\n\n### 当前状态\n- **构建锁状态：** 空闲 🔓\n- **当前构建：** 无\n- **锁持有者：** 无\n- **版本：** 1\n\n### 构建队列\n- **当前数量：** 0/5\n- **Issue触发：** 0/3\n- **手动触发：** 0/5\n\n---\n\n### 重置记录\n**重置时间：** \$(date '+%Y-%m-%d %H:%M:%S')\n**重置原因：** JSON解析失败，重置为默认模板\n\n### 队列数据\n\`\`\`json\n$RESET_QUEUE_DATA\n\`\`\`"
              
              UPDATE_RESPONSE=$(curl -s -X PATCH \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE" \
                -d "$(jq -n --arg body "$RESET_BODY" '{"body": $body}')")
              
                             if echo "$UPDATE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
                 echo "✅ Queue reset successful"
                 echo "CLEANED_QUEUE_DATA=$(echo "$RESET_QUEUE_DATA" | jq -c .)" >> $GITHUB_ENV
                 echo "QUEUE_CLEANED=true" >> $GITHUB_ENV
                 break
              else
                echo "❌ Queue reset failed on attempt $attempt"
                if [ "$attempt" -lt "$MAX_RETRIES" ]; then
                  echo "Retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
                else
                  echo "Max retries reached, continuing without reset..."
                  echo "QUEUE_CLEANED=false" >> $GITHUB_ENV
                  break
                fi
              fi
            fi
            

            
            # 获取当前状态
            CURRENT_VERSION=$(echo "$QUEUE_DATA" | jq -r '.version // 1')
            LOCK_RUN_ID=$(echo "$QUEUE_DATA" | jq -r '.run_id // null')
            QUEUE=$(echo "$QUEUE_DATA" | jq -r '.queue // []')
            
            echo "Current version: $CURRENT_VERSION"
            echo "Lock run_id: $LOCK_RUN_ID"
            echo "Queue: $QUEUE"
            
            # 检查需要清理的项目
            NEED_CLEANUP=false
            CLEANUP_REASONS=()
            
            # 1. 检查锁超时（超过2小时）
            if [ "$LOCK_RUN_ID" != "null" ]; then
              LOCK_ISSUE_JOIN_TIME=$(echo "$QUEUE" | \
                jq -r --arg run_id "$LOCK_RUN_ID" \
                '.[] | select(.issue_number == $run_id) | .join_time // empty' 2>/dev/null || echo "")
              
              if [ -n "$LOCK_ISSUE_JOIN_TIME" ]; then
                JOIN_TIMESTAMP=$(date -d "$LOCK_ISSUE_JOIN_TIME" +%s 2>/dev/null || echo "0")
                CURRENT_TIMESTAMP=$(date +%s)
                LOCK_DURATION_HOURS=$(( (CURRENT_TIMESTAMP - JOIN_TIMESTAMP) / 3600 ))
                
                if [ "$LOCK_DURATION_HOURS" -ge 2 ]; then
                  NEED_CLEANUP=true
                  CLEANUP_REASONS+=("锁超时：已占用${LOCK_DURATION_HOURS}小时")
                  echo "❌ Lock timeout: ${LOCK_DURATION_HOURS} hours"
                fi
              else
                NEED_CLEANUP=true
                CLEANUP_REASONS+=("锁异常：找不到锁持有时间")
                echo "❌ Lock anomaly: no join time found"
              fi
            fi
            
            # 2. 检查重复项
            if [ "$(echo "$QUEUE" | jq -r 'type')" = "array" ]; then
              DUPLICATE_ITEMS=$(echo "$QUEUE" | \
                jq -r 'group_by(.issue_number) | .[] | select(length > 1) | .[0].issue_number' 2>/dev/null || echo "")
              
              if [ -n "$DUPLICATE_ITEMS" ]; then
                NEED_CLEANUP=true
                CLEANUP_REASONS+=("队列重复：构建项目 $DUPLICATE_ITEMS 重复")
                echo "❌ Duplicate items: $DUPLICATE_ITEMS"
              fi
            fi
            
            # 3. 检查无效issue
            if [ "$(echo "$QUEUE" | jq -r 'type')" = "array" ]; then
              INVALID_ISSUES=()
              for issue_number in $(echo "$QUEUE" | jq -r '.[].issue_number'); do
                ISSUE_RESPONSE=$(curl -s \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number")
                
                if echo "$ISSUE_RESPONSE" | jq -e '.message' | grep -q "Not Found"; then
                  INVALID_ISSUES+=("$issue_number")
                  echo "❌ Issue #$issue_number not found"
                fi
              done
              
              if [ ${#INVALID_ISSUES[@]} -gt 0 ]; then
                NEED_CLEANUP=true
                CLEANUP_REASONS+=("无效issue：${INVALID_ISSUES[*]} 不存在")
                echo "❌ Invalid issues: ${INVALID_ISSUES[*]}"
              fi
            fi
            
            # 4. 检查已结束的runs
            if [ "$(echo "$QUEUE" | jq -r 'type')" = "array" ]; then
              EXPIRED_RUNS=()
              for run_id in $(echo "$QUEUE" | jq -r '.[] | select(.trigger_type == "workflow_dispatch") | .issue_number'); do
                # 检查workflow run是否存在且未完成
                RUN_RESPONSE=$(curl -s \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id")
                
                if echo "$RUN_RESPONSE" | jq -e '.message' | grep -q "Not Found"; then
                  EXPIRED_RUNS+=("$run_id")
                  echo "❌ Run #$run_id not found"
                else
                  # 检查run状态：completed, cancelled, failure, skipped 都是已结束状态
                  RUN_STATUS=$(echo "$RUN_RESPONSE" | jq -r '.status // "unknown"')
                  RUN_CONCLUSION=$(echo "$RUN_RESPONSE" | jq -r '.conclusion // "unknown"')
                  
                  if [ "$RUN_STATUS" = "completed" ] || [ "$RUN_STATUS" = "cancelled" ] || [ "$RUN_STATUS" = "failure" ] || [ "$RUN_STATUS" = "skipped" ]; then
                    EXPIRED_RUNS+=("$run_id")
                    echo "❌ Run #$run_id ended with status: $RUN_STATUS, conclusion: $RUN_CONCLUSION"
                  fi
                fi
              done
              
              if [ ${#EXPIRED_RUNS[@]} -gt 0 ]; then
                NEED_CLEANUP=true
                CLEANUP_REASONS+=("已结束runs：${EXPIRED_RUNS[*]} 已完成/取消/失败/跳过或不存在")
                echo "❌ Expired runs: ${EXPIRED_RUNS[*]}"
              fi
            fi
            
            # 执行清理
            if [ "$NEED_CLEANUP" = true ]; then
              echo "Performing queue cleanup..."
              echo "Cleanup reasons: ${CLEANUP_REASONS[*]}"
              
              # 开始清理数据
              CLEANED_QUEUE_DATA=$(echo "$QUEUE_DATA" | \
                jq --arg new_version "$((CURRENT_VERSION + 1))" '
                # 移除重复项
                .queue = (.queue | group_by(.issue_number) | map(.[0]))
                # 重置异常锁
                | .run_id = null
                | .version = ($new_version | tonumber)
              ')
              
              # 移除无效issue
              if [ ${#INVALID_ISSUES[@]} -gt 0 ]; then
                for invalid_issue in "${INVALID_ISSUES[@]}"; do
                  CLEANED_QUEUE_DATA=$(echo "$CLEANED_QUEUE_DATA" | \
                    jq --arg issue_number "$invalid_issue" \
                    '.queue = (.queue | map(select(.issue_number != $issue_number)))')
                done
              fi
              
              # 移除已结束的runs
              if [ ${#EXPIRED_RUNS[@]} -gt 0 ]; then
                for expired_run in "${EXPIRED_RUNS[@]}"; do
                  CLEANED_QUEUE_DATA=$(echo "$CLEANED_QUEUE_DATA" | \
                    jq --arg run_id "$expired_run" \
                    '.queue = (.queue | map(select(.issue_number != $run_id)))')
                done
              fi
              
              # 计算清理后的队列数量
              CLEANED_TOTAL_COUNT=$(echo "$CLEANED_QUEUE_DATA" | jq '.queue | length // 0')
              CLEANED_ISSUE_COUNT=$(echo "$CLEANED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
              CLEANED_WORKFLOW_COUNT=$(echo "$CLEANED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
              
              echo "Cleaned queue data: $CLEANED_QUEUE_DATA"
              echo "Cleaned counts - Total: $CLEANED_TOTAL_COUNT, Issue: $CLEANED_ISSUE_COUNT, Workflow: $CLEANED_WORKFLOW_COUNT"
              
              # 构建清理原因文本
              CLEANUP_REASON_TEXT=""
              for reason in "${CLEANUP_REASONS[@]}"; do
                CLEANUP_REASON_TEXT="${CLEANUP_REASON_TEXT}• $reason\n"
              done
              
              # 更新队列管理issue
              UPDATED_BODY: |
                ## 构建队列管理

                **最后更新时间：** $(date '+%Y-%m-%d %H:%M:%S')

                ### 当前状态
                - **构建锁状态：** 空闲 🔓 (已清理)
                - **当前构建：** 无
                - **锁持有者：** 无
                - **版本：** $(echo "$CLEANED_QUEUE_DATA" | jq -r '.version')

                ### 构建队列
                - **当前数量：** $CLEANED_TOTAL_COUNT/5
                - **Issue触发：** $CLEANED_ISSUE_COUNT/3
                - **手动触发：** $CLEANED_WORKFLOW_COUNT/5

                ---

                ### 清理记录
                **清理时间：** $(date '+%Y-%m-%d %H:%M:%S')
                **清理原因：**
                $CLEANUP_REASON_TEXT

                ### 队列数据
                ```json
                $CLEANED_QUEUE_DATA
                ```
              
              # 尝试更新队列管理issue
              UPDATE_RESPONSE=$(curl -s -X PATCH \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE" \
                -d "$(jq -n --arg body "$UPDATED_BODY" '{"body": $body}')")
              
              # 验证更新是否成功
              if echo "$UPDATE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
                echo "✅ Queue cleanup successful on attempt $attempt"
                echo "Queue cleanup completed successfully!"
                echo "Cleaned total count: $CLEANED_TOTAL_COUNT"
                echo "Cleaned issue count: $CLEANED_ISSUE_COUNT"
                echo "Cleaned workflow count: $CLEANED_WORKFLOW_COUNT"
                
                # 保存清理后的数据供后续使用（使用jq -c生成单行JSON）
                echo "CLEANED_QUEUE_DATA=$(echo "$CLEANED_QUEUE_DATA" | jq -c .)" >> $GITHUB_ENV
                echo "QUEUE_CLEANED=true" >> $GITHUB_ENV
                break
              else
                echo "❌ Queue cleanup failed on attempt $attempt"
                if [ "$attempt" -lt "$MAX_RETRIES" ]; then
                  echo "Retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
                else
                  echo "Max retries reached, continuing without cleanup..."
                  echo "QUEUE_CLEANED=false" >> $GITHUB_ENV
                  break
                fi
              fi
            else
              echo "No cleanup needed, queue is healthy"
              echo "QUEUE_CLEANED=false" >> $GITHUB_ENV
              break
            fi
          done

      - name: Check queue status
        id: check_queue
        run: |
          # 获取当前队列状态
          echo "Checking current queue status..."
          
          # 通用函数：从队列管理issue中提取JSON数据
          extract_queue_json() {
            local issue_content="$1"
            echo "$issue_content" | jq -r '.body' | grep -oP '```json\s*\K[^{]*\{.*\}' | head -1
          }
          
          # 队列管理issue编号
          QUEUE_MANAGER_ISSUE="1"
          
          # 检查是否已经清理过队列
          if [ "${{ env.QUEUE_CLEANED }}" = "true" ]; then
            echo "Using cleaned queue data from previous step"
            QUEUE_DATA='${{ env.CLEANED_QUEUE_DATA }}'
          else
            # 获取队列管理issue的内容
            QUEUE_MANAGER_CONTENT=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
            
            # 检查issue是否存在
            if echo "$QUEUE_MANAGER_CONTENT" | jq -e '.message' | grep -q "Not Found"; then
              echo "Error: Queue manager issue #$QUEUE_MANAGER_ISSUE not found"
              exit 1
            fi
            
            # 使用通用函数提取队列数据
            QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
            
            # 如果提取失败，直接退出
            if [ -z "$QUEUE_DATA" ]; then
              echo "❌ Failed to extract queue JSON, aborting."
              exit 1
            fi
            
            # 验证JSON格式
            if ! echo "$QUEUE_DATA" | jq . > /dev/null 2>&1; then
              echo "❌ Invalid JSON format in queue data, aborting."
              exit 1
            fi
            
            # 强制单行JSON
            QUEUE_DATA=$(echo "$QUEUE_DATA" | jq -c .)
          fi
          
          # 验证JSON格式
          echo "Validating JSON format..."
          echo "$QUEUE_DATA" | jq . > /dev/null
          echo "JSON validation passed"
          
          # 调试输出队列数据
          echo "Queue data: $QUEUE_DATA"
          echo "Queue data type: $(echo "$QUEUE_DATA" | jq -r 'type')"
          echo "Queue: $(echo "$QUEUE_DATA" | jq -r '.queue')"
          echo "Current build: $(echo "$QUEUE_DATA" | jq -r '.current_build')"
          echo "Lock holder: $(echo "$QUEUE_DATA" | jq -r '.lock_holder')"
          
          # 获取当前队列数量和类型统计
          TOTAL_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | length // 0')
          ISSUE_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
          WORKFLOW_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
          CURRENT_BUILD=$(echo "$QUEUE_DATA" | jq -r '.current_build // null')
          LOCK_HOLDER=$(echo "$QUEUE_DATA" | jq -r '.lock_holder // null')
          
          echo "Total queue count: $TOTAL_QUEUE_COUNT/5"
          echo "Issue queue count: $ISSUE_QUEUE_COUNT/3"
          echo "Workflow queue count: $WORKFLOW_QUEUE_COUNT/5"
          echo "Current build: $CURRENT_BUILD"
          echo "Lock holder: $LOCK_HOLDER"
          
          # 检查是否可以加入队列
          QUEUE_FULL=false
          REJECT_REASON=""
          
          # 根据触发类型检查队列限制
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            if [ "$ISSUE_QUEUE_COUNT" -ge 3 ]; then
              QUEUE_FULL=true
              REJECT_REASON="Issue触发队列已满 (当前: $ISSUE_QUEUE_COUNT/3)"
            fi
          else
            if [ "$TOTAL_QUEUE_COUNT" -ge 5 ]; then
              QUEUE_FULL=true
              REJECT_REASON="手动触发队列已满 (当前: $TOTAL_QUEUE_COUNT/5)"
            fi
          fi
          
          if [ "$QUEUE_FULL" = true ]; then
            echo "Queue is full: $REJECT_REASON"
            echo "QUEUE_FULL=true" >> $GITHUB_ENV
            echo "REJECT_REASON=$REJECT_REASON" >> $GITHUB_ENV
            
            # 计算预计等待时间（假设每个构建需要30分钟）
            ESTIMATED_WAIT=$((TOTAL_QUEUE_COUNT * 30))
            echo "ESTIMATED_WAIT=$ESTIMATED_WAIT" >> $GITHUB_ENV
          else
            echo "Queue has space"
            echo "QUEUE_FULL=false" >> $GITHUB_ENV
          fi
          
          # 保存队列数据供后续使用
          echo "QUEUE_DATA=$QUEUE_DATA" >> $GITHUB_ENV
          echo "CURRENT_BUILD=$CURRENT_BUILD" >> $GITHUB_ENV
          echo "LOCK_HOLDER=$LOCK_HOLDER" >> $GITHUB_ENV

      - name: Handle queue full
        if: env.QUEUE_FULL == 'true'
        run: |
          # 通用函数：从队列管理issue中提取JSON数据
          extract_queue_json() {
            local issue_content="$1"
            echo "$issue_content" | jq -r '.body' | grep -oP '```json\s*\K[^{]*\{.*\}' | head -1
          }
          
          # 从Issue #1实时获取最新队列数据
          QUEUE_MANAGER_ISSUE="1"
          QUEUE_MANAGER_CONTENT=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
          
          # 检查issue是否存在
          if echo "$QUEUE_MANAGER_CONTENT" | jq -e '.message' | grep -q "Not Found"; then
            echo "❌ Queue manager issue #$QUEUE_MANAGER_ISSUE not found"
            exit 1
          fi
          
          # 使用通用函数提取队列数据
          QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
          
          # 如果提取失败，直接退出
          if [ -z "$QUEUE_DATA" ]; then
            echo "❌ Failed to extract queue JSON, aborting."
            exit 1
          fi
          
          # 验证JSON格式
          if ! echo "$QUEUE_DATA" | jq . > /dev/null 2>&1; then
            echo "❌ Invalid JSON format in queue data, aborting."
            exit 1
          fi
          
          # 强制单行JSON
          QUEUE_DATA=$(echo "$QUEUE_DATA" | jq -c .)

          TOTAL_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | length // 0')
          ISSUE_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
          WORKFLOW_QUEUE_COUNT=$(echo "$QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
          REJECT_REASON='${{ env.REJECT_REASON }}'
          ESTIMATED_WAIT='${{ env.ESTIMATED_WAIT }}'
          
          # 队列满员，拒绝请求
          REJECT_COMMENT="## ❌ 队列已满

          **拒绝原因：** $REJECT_REASON
          **当前队列状态：**
          - 总队列：$TOTAL_QUEUE_COUNT/5
          - Issue触发：$ISSUE_QUEUE_COUNT/3
          - 手动触发：$WORKFLOW_QUEUE_COUNT/5
          **预计等待时间：** 约${ESTIMATED_WAIT}分钟

          **建议：**
          - 请稍后重试
          - 或使用其他触发方式

          **时间：** $(date '+%Y-%m-%d %H:%M:%S')"
          
          # 只在issue模式下添加拒绝评论
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d "$(jq -n --arg body "$REJECT_COMMENT" '{"body": $body}')"
          fi
          
          # 退出工作流
          exit 1

      - name: Join queue
        if: env.QUEUE_FULL == 'false'
        run: |
          # 加入队列
          echo "Joining queue..."
          
          # 重试机制参数
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          # 获取当前构建信息
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            CURRENT_BUILD_ID="${{ github.event.issue.number }}"
            CURRENT_BUILD_TITLE="${{ github.event.issue.title }}"
          else
            CURRENT_BUILD_ID="${{ github.run_id }}"
            CURRENT_BUILD_TITLE="Workflow Dispatch Build"
          fi
          CURRENT_USER="${{ github.actor }}"
          JOIN_TIME=$(date -Iseconds)
          
          # 创建队列项
          QUEUE_ITEM=$(jq -n \
            --arg issue_number "$CURRENT_BUILD_ID" \
            --arg issue_title "$CURRENT_BUILD_TITLE" \
            --arg user "$CURRENT_USER" \
            --arg join_time "$JOIN_TIME" \
            --arg trigger_type "$TRIGGER_TYPE" \
            '{
              issue_number: $issue_number,
              issue_title: $issue_title,
              user: $user,
              join_time: $join_time,
              trigger_type: $trigger_type
            }')
          
          echo "Queue item: $QUEUE_ITEM"
          
          # 重试加入队列
          for attempt in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $attempt of $MAX_RETRIES to join queue..."
            
            # 获取当前队列数据
            QUEUE_MANAGER_ISSUE="1"
            QUEUE_MANAGER_CONTENT=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
            
            # 检查issue是否存在
            if echo "$QUEUE_MANAGER_CONTENT" | jq -e '.message' | grep -q "Not Found"; then
              echo "❌ Queue manager issue #$QUEUE_MANAGER_ISSUE not found"
              exit 1
            fi
            
            # 通用函数：从队列管理issue中提取JSON数据
            extract_queue_json() {
              local issue_content="$1"
              echo "$issue_content" | jq -r '.body' | grep -oP '```json\s*\K[^{]*\{.*\}' | head -1
            }
            
            # 提取队列数据
            QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
            
            # 调试输出
            echo "Debug: QUEUE_MANAGER_CONTENT length: $(echo "$QUEUE_MANAGER_CONTENT" | wc -c)"
            echo "Debug: Issue body preview: $(echo "$QUEUE_MANAGER_CONTENT" | jq -r '.body' | head -5)"
            echo "Debug: Extracted QUEUE_DATA: '$QUEUE_DATA'"
            
            # 如果提取失败，直接退出
            if [ -z "$QUEUE_DATA" ]; then
              echo "❌ Failed to extract queue JSON, aborting."
              echo "Debug: Issue body contains:"
              echo "$QUEUE_MANAGER_CONTENT" | jq -r '.body' | head -20
              exit 1
            fi
            
            # 验证JSON格式
            if ! echo "$QUEUE_DATA" | jq . > /dev/null 2>&1; then
              echo "❌ Invalid JSON format in queue data, aborting."
              exit 1
            fi
            
            # 强制单行JSON
            QUEUE_DATA=$(echo "$QUEUE_DATA" | jq -c .)
            
            # 获取当前版本号
            CURRENT_VERSION=$(echo "$QUEUE_DATA" | jq -r '.version // 1')
            echo "Current version: $CURRENT_VERSION"
            
            # 检查是否已经在队列中
            EXISTING_ITEM=$(echo "$QUEUE_DATA" | \
              jq -r --arg issue_number "$CURRENT_BUILD_ID" \
              '.queue[] | select(.issue_number == $issue_number) | .issue_number // empty')
            
            if [ -n "$EXISTING_ITEM" ]; then
              echo "✅ Already in queue, skipping join"
              break
            fi
            
            # 更新队列数据
            UPDATED_QUEUE_DATA=$(echo "$QUEUE_DATA" | \
              jq --argjson item "$QUEUE_ITEM" \
              --arg new_version "$((CURRENT_VERSION + 1))" \
              '.queue += [$item] | .version = ($new_version | tonumber)')
            
            echo "Updated queue data: $UPDATED_QUEUE_DATA"
            
            # 计算队列数量
            UPDATED_TOTAL_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | length // 0')
            UPDATED_ISSUE_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
            UPDATED_WORKFLOW_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
            
            echo "Updated counts - Total: $UPDATED_TOTAL_COUNT, Issue: $UPDATED_ISSUE_COUNT, Workflow: $UPDATED_WORKFLOW_COUNT"
            
            # 更新队列管理issue
            UPDATED_BODY: |
              ## 构建队列管理

              **最后更新时间：** $(date '+%Y-%m-%d %H:%M:%S')

              ### 当前状态
              - **构建锁状态：** 空闲 🔓
              - **当前构建：** 无
              - **锁持有者：** 无
              - **版本：** $((CURRENT_VERSION + 1))

              ### 构建队列
              - **当前数量：** $UPDATED_TOTAL_COUNT/5
              - **Issue触发：** $UPDATED_ISSUE_COUNT/3
              - **手动触发：** $UPDATED_WORKFLOW_COUNT/5

              ---

              ### 队列数据
              ```json
              $UPDATED_QUEUE_DATA
              ```
            
            # 在写入issue前，强制单行JSON
            UPDATED_QUEUE_DATA=$(echo "$UPDATED_QUEUE_DATA" | jq -c .)
            
            # 尝试更新issue
            UPDATE_RESPONSE=$(curl -s -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE" \
              -d "$(jq -n --arg body "$UPDATED_BODY" '{"body": $body}')")
            
            # 验证更新是否成功
            if echo "$UPDATE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              echo "✅ Queue join successful on attempt $attempt"
              
              # 计算队列位置
              QUEUE_POSITION=$(echo "$UPDATED_QUEUE_DATA" | \
                jq -r --arg issue_number "$CURRENT_BUILD_ID" \
                '.queue | sort_by(.join_time) | map(.issue_number) | index($issue_number) // 0 | . + 1')
              
              # 根据触发类型设置队列限制
              if [ "$TRIGGER_TYPE" = "issue" ]; then
                QUEUE_LIMIT=3
              else
                QUEUE_LIMIT=5
              fi
              echo "QUEUE_POSITION=$QUEUE_POSITION" >> $GITHUB_ENV
              
              # 添加队列加入评论
              QUEUE_JOIN_COMMENT="## 已加入队列

              **队列位置：** $QUEUE_POSITION/$QUEUE_LIMIT (总队列)
              **预计等待时间：** 约$((UPDATED_TOTAL_COUNT * 30))分钟
              **状态：** 等待中 ⏳

              **当前队列状态：**
              - 总队列：$UPDATED_TOTAL_COUNT/5
              - Issue触发：$UPDATED_ISSUE_COUNT/3
              - 手动触发：$UPDATED_WORKFLOW_COUNT/5

              **队列信息：**
              - 加入时间：$(date '+%Y-%m-%d %H:%M:%S')
              - 触发方式：$TRIGGER_TYPE
              - 队列管理：Issue #$QUEUE_MANAGER_ISSUE"
              
              # 只在issue模式下发布评论
              if [ "$TRIGGER_TYPE" = "issue" ]; then
                curl -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
                  -d "$(jq -n --arg body "$QUEUE_JOIN_COMMENT" '{"body": $body}')"
              fi
              
              break
            else
              echo "❌ Queue join failed on attempt $attempt"
              if [ "$attempt" -lt "$MAX_RETRIES" ]; then
                echo "Retrying in $RETRY_DELAY seconds..."
                sleep $RETRY_DELAY
              else
                echo "Max retries reached, exiting..."
                exit 1
              fi
            fi
          done

      - name: Wait in queue
        if: env.QUEUE_FULL == 'false'
        run: |
          # 等待轮到自己的位置并获取构建锁
          echo "Waiting in queue and for build lock..."
          
          START_TIME=$(date +%s)
          TIMEOUT=21600  # 6小时超时
          
          # 获取当前构建标识符
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            CURRENT_BUILD_ID="${{ github.event.issue.number }}"
          else
            CURRENT_BUILD_ID="${{ github.run_id }}"
          fi
          
          echo "Current build ID: $CURRENT_BUILD_ID"
          
          # 如果刚刚加入队列且位置是1，直接开始构建
          if [ "$QUEUE_POSITION" = "1" ]; then
            echo "✅ Build is at front of queue, proceeding to build..."
            exit 0
          fi
          
          # 重试机制参数
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          # 否则等待并检查队列状态
          while [ $(($(date +%s) - START_TIME)) -lt $TIMEOUT ]; do
            echo "Checking queue position and lock status... ($(($(date +%s) - START_TIME))s elapsed)"
            
            # 获取队列数据
            QUEUE_MANAGER_ISSUE="1"
            QUEUE_MANAGER_CONTENT=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
            
            # 检查issue是否存在
            if echo "$QUEUE_MANAGER_CONTENT" | jq -e '.message' | grep -q "Not Found"; then
              echo "❌ Queue manager issue #$QUEUE_MANAGER_ISSUE not found"
              exit 1
            fi
            
            # 通用函数：从队列管理issue中提取JSON数据
            extract_queue_json() {
              local issue_content="$1"
              echo "$issue_content" | jq -r '.body' | grep -oP '```json\s*\K[^{]*\{.*\}' | head -1
            }
            
            # 提取队列数据
            CURRENT_QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
            
            # 如果提取失败，直接退出
            if [ -z "$CURRENT_QUEUE_DATA" ]; then
              echo "❌ Failed to extract queue JSON, aborting."
              exit 1
            fi
            
            # 验证JSON格式
            if ! echo "$CURRENT_QUEUE_DATA" | jq . > /dev/null 2>&1; then
              echo "❌ Invalid JSON format in queue data, aborting."
              exit 1
            fi
            
            # 强制单行JSON
            CURRENT_QUEUE_DATA=$(echo "$CURRENT_QUEUE_DATA" | jq -c .)
            
            # 检查当前构建是否在队列中
            ISSUE_IN_QUEUE=$(echo "$CURRENT_QUEUE_DATA" | \
              jq -r --arg issue_number "$CURRENT_BUILD_ID" \
              '.queue | map(.issue_number) | contains([$issue_number])')
            
            if [ "$ISSUE_IN_QUEUE" != "true" ]; then
              echo "❌ Build not found in queue, exiting..."
              exit 1
            fi
            
            # 检查是否是首位
            CURRENT_POSITION=$(echo "$CURRENT_QUEUE_DATA" | \
              jq -r --arg issue_number "$CURRENT_BUILD_ID" \
              '.queue | sort_by(.join_time) | map(.issue_number) | index($issue_number) // empty | . + 1')
            
            if [ "$CURRENT_POSITION" = "1" ]; then
              # 检查锁状态
              LOCK_RUN_ID=$(echo "$CURRENT_QUEUE_DATA" | jq -r '.run_id // null')
              
              if [ "$LOCK_RUN_ID" = "null" ]; then
                echo "✅ At front of queue and no lock, attempting to acquire lock..."
                
                # 重试获取锁
                for lock_attempt in $(seq 1 $MAX_RETRIES); do
                  echo "Lock attempt $lock_attempt of $MAX_RETRIES..."
                  
                  # 获取当前版本号
                  CURRENT_VERSION=$(echo "$CURRENT_QUEUE_DATA" | jq -r '.version // 1')
                  
                  # 尝试获取锁
                  UPDATED_QUEUE_DATA=$(echo "$CURRENT_QUEUE_DATA" | \
                    jq --arg run_id "${{ github.run_id }}" \
                    --arg new_version "$((CURRENT_VERSION + 1))" \
                    '.run_id = $run_id | .version = ($new_version | tonumber)')
                  
                  # 计算队列数量
                  UPDATED_TOTAL_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | length // 0')
                  UPDATED_ISSUE_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
                  UPDATED_WORKFLOW_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
                  
                  # 更新队列管理issue
                  UPDATED_BODY: |
                    ## 构建队列管理

                    **最后更新时间：** $(date '+%Y-%m-%d %H:%M:%S')

                    ### 当前状态
                    - **构建锁状态：** 占用 🔒 (run_id: ${{ github.run_id }})
                    - **当前构建：** 队列首位
                    - **锁持有者：** 运行ID: ${{ github.run_id }}
                    - **版本：** $((CURRENT_VERSION + 1))

                    ### 构建队列
                    - **当前数量：** $UPDATED_TOTAL_COUNT/5
                    - **Issue触发：** $UPDATED_ISSUE_COUNT/3
                    - **手动触发：** $UPDATED_WORKFLOW_COUNT/5

                    ---

                    ### 队列数据
                    ```json
                    $UPDATED_QUEUE_DATA
                    ```
                  
                  UPDATE_RESPONSE=$(curl -s -X PATCH \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -H "Content-Type: application/json" \
                    "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE" \
                    -d "$(jq -n --arg body "$UPDATED_BODY" '{"body": $body}')")
                  
                  # 验证更新是否成功
                  if echo "$UPDATE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
                    echo "✅ Lock acquired successfully on attempt $lock_attempt"
                    break 2  # 跳出两层循环
                  else
                    echo "❌ Lock acquisition failed on attempt $lock_attempt"
                    if [ "$lock_attempt" -lt "$MAX_RETRIES" ]; then
                      echo "Retrying lock acquisition in $RETRY_DELAY seconds..."
                      sleep $RETRY_DELAY
                      
                      # 重新获取队列数据
                      QUEUE_MANAGER_CONTENT=$(curl -s \
                        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
                      
                      CURRENT_QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
                      if [ -z "$CURRENT_QUEUE_DATA" ]; then
                        echo "❌ Failed to extract queue JSON during retry, aborting."
                        exit 1
                      fi
                      
                      # 验证JSON格式
                      if ! echo "$CURRENT_QUEUE_DATA" | jq . > /dev/null 2>&1; then
                        echo "❌ Invalid JSON format in queue data during retry, aborting."
                        exit 1
                      fi
                      
                      # 强制单行JSON
                      CURRENT_QUEUE_DATA=$(echo "$CURRENT_QUEUE_DATA" | jq -c .)
                    else
                      echo "Max lock retries reached, continuing without lock..."
                      break 2
                    fi
                  fi
                done
              elif [ "$LOCK_RUN_ID" = "${{ github.run_id }}" ]; then
                echo "✅ Already holding lock, proceeding to build..."
                break
              else
                echo "Lock held by run_id: $LOCK_RUN_ID, waiting..."
                sleep 30
                continue
              fi
            else
              echo "Not at front of queue (position: $CURRENT_POSITION), waiting..."
              sleep 30
              continue
            fi
          done
          
          # 检查是否超时
          if [ $(($(date +%s) - START_TIME)) -ge $TIMEOUT ]; then
            echo "Queue timeout after 6 hours"
            
            # 只在issue模式下添加超时评论
            if [ "$TRIGGER_TYPE" = "issue" ]; then
              TIMEOUT_COMMENT="## ⏰ 队列等待超时

              **状态：** 队列等待超时（6小时）
              **时间：** $(date '+%Y-%m-%d %H:%M:%S')
              构建将自动终止。如需重新构建，请重新提交issue。"
              
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
                -d "$(jq -n --arg body "$TIMEOUT_COMMENT" '{"body": $body}')"
            fi
            
            exit 1
          fi

      - name: Leave queue
        if: env.QUEUE_FULL == 'false'
        run: |
          # 离开队列，开始构建
          echo "Leaving queue to start build..."
          
          # 重试机制参数
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          # 获取触发类型和当前构建标识符
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TRIGGER_TYPE="workflow_dispatch"
            CURRENT_BUILD_ID="${{ github.run_id }}"
          else
            TRIGGER_TYPE="issue"
            CURRENT_BUILD_ID="${{ github.event.issue.number }}"
          fi
          
          # 重试离开队列
          for attempt in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $attempt of $MAX_RETRIES to leave queue..."
            
            # 从队列管理issue中获取当前数据
            QUEUE_MANAGER_ISSUE="1"
            QUEUE_MANAGER_CONTENT=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
            
            # 检查issue是否存在
            if echo "$QUEUE_MANAGER_CONTENT" | jq -e '.message' | grep -q "Not Found"; then
              echo "❌ Queue manager issue #$QUEUE_MANAGER_ISSUE not found"
              exit 1
            fi
            
            # 通用函数：从队列管理issue中提取JSON数据
            extract_queue_json() {
              local issue_content="$1"
              echo "$issue_content" | jq -r '.body' | grep -oP '```json\s*\K[^{]*\{.*\}' | head -1
            }
            
            # 使用通用函数提取队列数据
            CURRENT_QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
            
            # 如果提取失败，直接退出
            if [ -z "$CURRENT_QUEUE_DATA" ]; then
              echo "❌ Failed to extract queue JSON, aborting."
              exit 1
            fi
            
            # 验证JSON格式
            if ! echo "$CURRENT_QUEUE_DATA" | jq . > /dev/null 2>&1; then
              echo "❌ Invalid JSON format in queue data, aborting."
              exit 1
            fi
            
            # 强制单行JSON
            CURRENT_QUEUE_DATA=$(echo "$CURRENT_QUEUE_DATA" | jq -c .)
            
            # 获取当前版本号
            CURRENT_VERSION=$(echo "$CURRENT_QUEUE_DATA" | jq -r '.version // 1')
            echo "Current version: $CURRENT_VERSION"
            
            # 从队列中移除当前构建，但保持锁状态
            UPDATED_QUEUE_DATA=$(echo "$CURRENT_QUEUE_DATA" | \
              jq --arg issue_number "$CURRENT_BUILD_ID" \
              --arg new_version "$((CURRENT_VERSION + 1))" \
              '.queue = (.queue | map(select(.issue_number != $issue_number))) | .version = ($new_version | tonumber)')
            
            # 计算更新后的队列数量
            UPDATED_TOTAL_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | length // 0')
            UPDATED_ISSUE_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
            UPDATED_WORKFLOW_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
            
            echo "Updated counts after leaving - Total: $UPDATED_TOTAL_COUNT, Issue: $UPDATED_ISSUE_COUNT, Workflow: $UPDATED_WORKFLOW_COUNT"
            
            # 更新队列管理issue - 保持锁状态，因为构建正在进行
            UPDATED_BODY: |
              ## 构建队列管理

              **最后更新时间：** $(date '+%Y-%m-%d %H:%M:%S')

              ### 当前状态
              - **构建锁状态：** 占用 🔒 (构建中 - run_id: ${{ github.run_id }})
              - **当前构建：** 队列首位
              - **锁持有者：** 运行ID: ${{ github.run_id }}
              - **版本：** $((CURRENT_VERSION + 1))

              ### 构建队列
              - **当前数量：** $UPDATED_TOTAL_COUNT/5
              - **Issue触发：** $UPDATED_ISSUE_COUNT/3
              - **手动触发：** $UPDATED_WORKFLOW_COUNT/5

              ---

              ### 队列数据
              ```json
              $UPDATED_QUEUE_DATA
              ```
            
            # 在写入issue前，强制单行JSON
            UPDATED_QUEUE_DATA=$(echo "$UPDATED_QUEUE_DATA" | jq -c .)
            
            # 尝试更新队列管理issue
            UPDATE_RESPONSE=$(curl -s -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE" \
              -d "$(jq -n --arg body "$UPDATED_BODY" '{"body": $body}')")
            
            # 验证更新是否成功
            if echo "$UPDATE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              echo "✅ Queue leave successful on attempt $attempt"
              
              # 只在issue模式下添加开始构建评论
              if [ "$TRIGGER_TYPE" = "issue" ]; then
                BUILD_START_COMMENT="## 🚀 开始构建

                **状态：** 构建已开始
                **构建锁：** 已获取 🔒
                **时间：** $(date '+%Y-%m-%d %H:%M:%S')
                构建过程正在进行中..."

                curl -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
                  -d "$(jq -n --arg body "$BUILD_START_COMMENT" '{"body": $body}')"
              fi
              
              break
            else
              echo "❌ Queue leave failed on attempt $attempt"
              if [ "$attempt" -lt "$MAX_RETRIES" ]; then
                echo "Retrying in $RETRY_DELAY seconds..."
                sleep $RETRY_DELAY
              else
                echo "Max retries reached, continuing..."
                break
              fi
            fi
          done

  build: # 构建阶段
    needs: [trigger, queue]
    runs-on: ubuntu-latest
    outputs:
      build_output: ${{ toJson(steps.output.outputs.data) }}
    steps:
      - name: Extract data
        id: extract
        run: |
          # 从trigger阶段获取数据
          INPUT='${{ fromJson(needs.trigger.outputs.trigger_output) }}'
          
          # 验证输入JSON格式
          echo "Validating input JSON format..."
          echo "$INPUT" | jq . > /dev/null
          echo "Input JSON validation passed"
          
          # 设置环境变量供后续步骤使用
          echo "CURRENT_DATA=$INPUT" >> $GITHUB_ENV

      - name: Pause for 5 minutes (for queue test)
        run: |
          echo "Pausing for 5 minutes to test queue..."
          sleep 300

      - name: Process data
        id: process
        run: |
          # 处理数据（添加构建状态）
          # 从环境变量中安全地提取JSON数据
          CURRENT_DATA='${{ env.CURRENT_DATA }}'
          
          # 验证JSON格式
          echo "Validating input JSON..."
          echo "$CURRENT_DATA" | jq . > /dev/null
          echo "Input JSON validation passed"
          
          # 使用jq处理JSON，添加构建状态
          PROCESSED=$(echo "$CURRENT_DATA" | jq -c --arg build_time "$(date -Iseconds)" '. + {built: true, build_time: $build_time}')
          
          # 验证处理后的JSON格式
          echo "Validating processed JSON..."
          echo "$PROCESSED" | jq . > /dev/null
          echo "Processed JSON validation passed"
          
          echo "CURRENT_DATA=$PROCESSED" >> $GITHUB_ENV

      - name: Output data
        id: output
        run: |
          # 直接使用Process步骤处理后的数据
          OUTPUT_DATA='${{ env.CURRENT_DATA }}'
          
          # 验证输出JSON格式
          echo "Validating output JSON format..."
          echo "$OUTPUT_DATA" | jq . > /dev/null
          echo "Output JSON validation passed"
          
          echo "data=$OUTPUT_DATA" >> $GITHUB_OUTPUT
          
          # 显示输出信息
          echo "Build output: $OUTPUT_DATA"

  finish: # 收尾阶段
    needs: [trigger, build]
    runs-on: ubuntu-latest
    steps:
      - name: Parse input
        run: |
          # 从trigger阶段获取最终数据
          INPUT='${{ fromJson(needs.trigger.outputs.trigger_output) }}'
          echo "FINAL_INPUT=$INPUT" >> $GITHUB_ENV

      - name: Release build lock
        run: |
          # 释放构建锁
          echo "Releasing build lock..."
          
          # 重试机制参数
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          # 重试释放锁
          for attempt in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $attempt of $MAX_RETRIES to release lock..."
            
            QUEUE_MANAGER_ISSUE="1"
            QUEUE_MANAGER_CONTENT=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE")
            
            # 检查issue是否存在
            if echo "$QUEUE_MANAGER_CONTENT" | jq -e '.message' | grep -q "Not Found"; then
              echo "❌ Queue manager issue #$QUEUE_MANAGER_ISSUE not found"
              exit 1
            fi
            
            # 通用函数：从队列管理issue中提取JSON数据
            extract_queue_json() {
              local issue_content="$1"
              echo "$issue_content" | jq -r '.body' | grep -oP '```json\s*\K[^{]*\{.*\}' | head -1
            }
            
            # 使用通用函数提取队列数据
            CURRENT_QUEUE_DATA=$(extract_queue_json "$QUEUE_MANAGER_CONTENT")
            
            # 如果提取失败，直接退出
            if [ -z "$CURRENT_QUEUE_DATA" ]; then
              echo "❌ Failed to extract queue JSON, aborting."
              exit 1
            fi
            
            # 验证JSON格式
            if ! echo "$CURRENT_QUEUE_DATA" | jq . > /dev/null 2>&1; then
              echo "❌ Invalid JSON format in queue data, aborting."
              exit 1
            fi
            
            # 强制单行JSON
            CURRENT_QUEUE_DATA=$(echo "$CURRENT_QUEUE_DATA" | jq -c .)
            
            # 获取当前版本号
            CURRENT_VERSION=$(echo "$CURRENT_QUEUE_DATA" | jq -r '.version // 1')
            echo "Current version: $CURRENT_VERSION"
            
            # 检查run_id是否匹配，只有锁持有者才能释放锁
            LOCK_RUN_ID=$(echo "$CURRENT_QUEUE_DATA" | jq -r '.run_id // null')
            if [ "$LOCK_RUN_ID" = "${{ github.run_id }}" ]; then
              echo "Releasing lock..."
              # 简单释放锁：只删除run_id
              UPDATED_QUEUE_DATA=$(echo "$CURRENT_QUEUE_DATA" | \
                jq --arg new_version "$((CURRENT_VERSION + 1))" \
                '.run_id = null | .version = ($new_version | tonumber)')
              
              # 计算队列数量
              UPDATED_TOTAL_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | length // 0')
              UPDATED_ISSUE_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "issue")) | length // 0')
              UPDATED_WORKFLOW_COUNT=$(echo "$UPDATED_QUEUE_DATA" | jq '.queue | map(select(.trigger_type == "workflow_dispatch")) | length // 0')
              
              # 更新队列管理issue
              UPDATED_BODY: |
                ## 构建队列管理

                **最后更新时间：** $(date '+%Y-%m-%d %H:%M:%S')

                ### 当前状态
                - **构建锁状态：** 空闲 🔓
                - **当前构建：** 无
                - **锁持有者：** 无
                - **版本：** $((CURRENT_VERSION + 1))

                ### 构建队列
                - **当前数量：** $UPDATED_TOTAL_COUNT/5
                - **Issue触发：** $UPDATED_ISSUE_COUNT/3
                - **手动触发：** $UPDATED_WORKFLOW_COUNT/5

                ---

                ### 队列数据
                ```json
                $UPDATED_QUEUE_DATA
                ```
              
              UPDATE_RESPONSE=$(curl -s -X PATCH \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$QUEUE_MANAGER_ISSUE" \
                -d "$(jq -n --arg body "$UPDATED_BODY" '{"body": $body}')")
              
              # 验证更新是否成功
              if echo "$UPDATE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
                echo "✅ Build lock released successfully on attempt $attempt"
                break
              else
                echo "❌ Lock release failed on attempt $attempt"
                if [ "$attempt" -lt "$MAX_RETRIES" ]; then
                  echo "Retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
                else
                  echo "Max retries reached, continuing..."
                  break
                fi
              fi
            else
              echo "Not lock owner (current: $LOCK_RUN_ID, expected: ${{ github.run_id }}), skipping lock release"
              break
            fi
          done

      - name: Final processing
        run: |
          # 使用jq解析单行JSON
          echo "Final data: $FINAL_INPUT"
          echo "Ready status: $(jq -r '.ready' <<< "$FINAL_INPUT")"
          echo "Version: $(jq -r '.version' <<< "$FINAL_INPUT")"

      - name: Generate report
        run: |
          echo "Build completed successfully"
          
          # 获取触发类型
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TRIGGER_TYPE="workflow_dispatch"
          else
            TRIGGER_TYPE="issue"
          fi
          
          # 只在issue模式下添加构建完成评论
          if [ "$TRIGGER_TYPE" = "issue" ]; then
            COMPLETION_COMMENT="## ✅ 构建完成

            **状态：** 构建已完成
            **构建锁：** 已释放 🔓
            **时间：** $(date '+%Y-%m-%d %H:%M:%S')
            下一个队列项目可以开始构建。"

            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d "$(jq -n --arg body "$COMPLETION_COMMENT" '{"body": $body}')"
          fi
